layui.define('rmlib', function (exports) {
    (function (b, a) { if (typeof define === "function" && define.amd) { define("Long", [], a) } else { if (typeof require === "function" && typeof module === "object" && module && module.exports) { module.exports = a() } else { (b.dcodeIO = b.dcodeIO || {})["Long"] = a() } } })(this, function () { function u(Z, ab, aa) { this.low = Z | 0; this.high = ab | 0; this.unsigned = !!aa } u.__isLong__; Object.defineProperty(u.prototype, "__isLong__", { value: true, enumerable: false, configurable: false }); u.isLong = function d(Z) { return (Z && Z.__isLong__) === true }; var M = {}; var B = {}; u.fromInt = function T(aa, Z) { var ab, ac; if (!Z) { aa = aa | 0; if (-128 <= aa && aa < 128) { ac = M[aa]; if (ac) { return ac } } ab = new u(aa, aa < 0 ? -1 : 0, false); if (-128 <= aa && aa < 128) { M[aa] = ab } return ab } else { aa = aa >>> 0; if (0 <= aa && aa < 256) { ac = B[aa]; if (ac) { return ac } } ab = new u(aa, (aa | 0) < 0 ? -1 : 0, true); if (0 <= aa && aa < 256) { B[aa] = ab } return ab } }; u.fromNumber = function j(aa, Z) { Z = !!Z; if (isNaN(aa) || !isFinite(aa)) { return u.ZERO } if (!Z && aa <= -t) { return u.MIN_VALUE } if (!Z && aa + 1 >= t) { return u.MAX_VALUE } if (Z && aa >= a) { return u.MAX_UNSIGNED_VALUE } if (aa < 0) { return u.fromNumber(-aa, Z).negate() } return new u((aa % b) | 0, (aa / b) | 0, Z) }; u.fromBits = function G(Z, ab, aa) { return new u(Z, ab, aa) }; u.fromString = function A(ad, ab, ae) { if (ad.length === 0) { throw Error("number format error: empty string") } if (ad === "NaN" || ad === "Infinity" || ad === "+Infinity" || ad === "-Infinity") { return u.ZERO } if (typeof ab === "number") { ae = ab, ab = false } ae = ae || 10; if (ae < 2 || 36 < ae) { throw Error("radix out of range: " + ae) } var aa; if ((aa = ad.indexOf("-")) > 0) { throw Error('number format error: interior "-" character: ' + ad) } else { if (aa === 0) { return u.fromString(ad.substring(1), ab, ae).negate() } } var ag = u.fromNumber(Math.pow(ae, 8)); var ai = u.ZERO; for (var ac = 0; ac < ad.length; ac += 8) { var ah = Math.min(8, ad.length - ac); var af = parseInt(ad.substring(ac, ac + ah), ae); if (ah < 8) { var Z = u.fromNumber(Math.pow(ae, ah)); ai = ai.multiply(Z).add(u.fromNumber(af)) } else { ai = ai.multiply(ag); ai = ai.add(u.fromNumber(af)) } } ai.unsigned = ab; return ai }; u.fromValue = function z(Z) { if (Z instanceof u) { return Z } if (typeof Z === "number") { return u.fromNumber(Z) } if (typeof Z === "string") { return u.fromString(Z) } return new u(Z.low, Z.high, Z.unsigned) }; var U = 1 << 16; var X = 1 << 24; var b = U * U; var a = b * b; var t = a / 2; var n = u.fromInt(X); u.ZERO = u.fromInt(0); u.UZERO = u.fromInt(0, true); u.ONE = u.fromInt(1); u.UONE = u.fromInt(1, true); u.NEG_ONE = u.fromInt(-1); u.MAX_VALUE = u.fromBits(4294967295 | 0, 2147483647 | 0, false); u.MAX_UNSIGNED_VALUE = u.fromBits(4294967295 | 0, 4294967295 | 0, true); u.MIN_VALUE = u.fromBits(0, 2147483648 | 0, false); u.prototype.toInt = function o() { return this.unsigned ? this.low >>> 0 : this.low }; u.prototype.toNumber = function Q() { if (this.unsigned) { return ((this.high >>> 0) * b) + (this.low >>> 0) } return this.high * b + (this.low >>> 0) }; u.prototype.toString = function f(ad) { ad = ad || 10; if (ad < 2 || 36 < ad) { throw RangeError("radix out of range: " + ad) } if (this.isZero()) { return "0" } var af; if (this.isNegative()) { if (this.equals(u.MIN_VALUE)) { var ab = u.fromNumber(ad); var Z = this.divide(ab); af = Z.multiply(ab).subtract(this); return Z.toString(ad) + af.toInt().toString(ad) } else { return "-" + this.negate().toString(ad) } } var ag = u.fromNumber(Math.pow(ad, 6), this.unsigned); af = this; var ah = ""; while (true) { var ae = af.divide(ag), ac = af.subtract(ae.multiply(ag)).toInt() >>> 0, aa = ac.toString(ad); af = ae; if (af.isZero()) { return aa + ah } else { while (aa.length < 6) { aa = "0" + aa } ah = "" + aa + ah } } }; u.prototype.getHighBits = function R() { return this.high }; u.prototype.getHighBitsUnsigned = function h() { return this.high >>> 0 }; u.prototype.getLowBits = function r() { return this.low }; u.prototype.getLowBitsUnsigned = function H() { return this.low >>> 0 }; u.prototype.getNumBitsAbs = function V() { if (this.isNegative()) { return this.equals(u.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs() } var aa = this.high != 0 ? this.high : this.low; for (var Z = 31; Z > 0; Z--) { if ((aa & (1 << Z)) != 0) { break } } return this.high != 0 ? Z + 33 : Z + 1 }; u.prototype.isZero = function F() { return this.high === 0 && this.low === 0 }; u.prototype.isNegative = function J() { return !this.unsigned && this.high < 0 }; u.prototype.isPositive = function P() { return this.unsigned || this.high >= 0 }; u.prototype.isOdd = function I() { return (this.low & 1) === 1 }; u.prototype.isEven = function q() { return (this.low & 1) === 0 }; u.prototype.equals = function C(Z) { if (!u.isLong(Z)) { Z = u.fromValue(Z) } if (this.unsigned !== Z.unsigned && (this.high >>> 31) === 1 && (Z.high >>> 31) === 1) { return false } return this.high === Z.high && this.low === Z.low }; u.eq = u.prototype.equals; u.prototype.notEquals = function S(Z) { return !this.equals(Z) }; u.neq = u.prototype.notEquals; u.prototype.lessThan = function m(Z) { return this.compare(Z) < 0 }; u.prototype.lt = u.prototype.lessThan; u.prototype.lessThanOrEqual = function L(Z) { return this.compare(Z) <= 0 }; u.prototype.lte = u.prototype.lessThanOrEqual; u.prototype.greaterThan = function g(Z) { return this.compare(Z) > 0 }; u.prototype.gt = u.prototype.greaterThan; u.prototype.greaterThanOrEqual = function E(Z) { return this.compare(Z) >= 0 }; u.prototype.gte = u.prototype.greaterThanOrEqual; u.prototype.compare = function l(aa) { if (!u.isLong(aa)) { aa = u.fromValue(aa) } if (this.equals(aa)) { return 0 } var Z = this.isNegative(), ab = aa.isNegative(); if (Z && !ab) { return -1 } if (!Z && ab) { return 1 } if (!this.unsigned) { return this.subtract(aa).isNegative() ? -1 : 1 } return (aa.high >>> 0) > (this.high >>> 0) || (aa.high === this.high && (aa.low >>> 0) > (this.low >>> 0)) ? -1 : 1 }; u.prototype.negate = function p() { if (!this.unsigned && this.equals(u.MIN_VALUE)) { return u.MIN_VALUE } return this.not().add(u.ONE) }; u.prototype.neg = u.prototype.negate; u.prototype.add = function c(ac) { if (!u.isLong(ac)) { ac = u.fromValue(ac) } var af = this.high >>> 16; var aa = this.high & 65535; var ah = this.low >>> 16; var ab = this.low & 65535; var aj = ac.high >>> 16; var ad = ac.high & 65535; var ak = ac.low >>> 16; var ae = ac.low & 65535; var al = 0, ag = 0, Z = 0, ai = 0; ai += ab + ae; Z += ai >>> 16; ai &= 65535; Z += ah + ak; ag += Z >>> 16; Z &= 65535; ag += aa + ad; al += ag >>> 16; ag &= 65535; al += af + aj; al &= 65535; return u.fromBits((Z << 16) | ai, (al << 16) | ag, this.unsigned) }; u.prototype.subtract = function k(Z) { if (!u.isLong(Z)) { Z = u.fromValue(Z) } return this.add(Z.negate()) }; u.prototype.sub = u.prototype.subtract; u.prototype.multiply = function x(ak) { if (this.isZero()) { return u.ZERO } if (!u.isLong(ak)) { ak = u.fromValue(ak) } if (ak.isZero()) { return u.ZERO } if (this.equals(u.MIN_VALUE)) { return ak.isOdd() ? u.MIN_VALUE : u.ZERO } if (ak.equals(u.MIN_VALUE)) { return this.isOdd() ? u.MIN_VALUE : u.ZERO } if (this.isNegative()) { if (ak.isNegative()) { return this.negate().multiply(ak.negate()) } else { return this.negate().multiply(ak).negate() } } else { if (ak.isNegative()) { return this.multiply(ak.negate()).negate() } } if (this.lessThan(n) && ak.lessThan(n)) { return u.fromNumber(this.toNumber() * ak.toNumber(), this.unsigned) } var ae = this.high >>> 16; var aa = this.high & 65535; var ag = this.low >>> 16; var ab = this.low & 65535; var ai = ak.high >>> 16; var ac = ak.high & 65535; var aj = ak.low >>> 16; var ad = ak.low & 65535; var al = 0, af = 0, Z = 0, ah = 0; ah += ab * ad; Z += ah >>> 16; ah &= 65535; Z += ag * ad; af += Z >>> 16; Z &= 65535; Z += ab * aj; af += Z >>> 16; Z &= 65535; af += aa * ad; al += af >>> 16; af &= 65535; af += ag * aj; al += af >>> 16; af &= 65535; af += ab * ac; al += af >>> 16; af &= 65535; al += ae * ad + aa * aj + ag * ac + ab * ai; al &= 65535; return u.fromBits((Z << 16) | ah, (al << 16) | af, this.unsigned) }; u.prototype.mul = u.prototype.multiply; u.prototype.divide = function y(Z) { if (!u.isLong(Z)) { Z = u.fromValue(Z) } if (Z.isZero()) { throw (new Error("division by zero")) } if (this.isZero()) { return this.unsigned ? u.UZERO : u.ZERO } var ae, ag, ac; if (this.equals(u.MIN_VALUE)) { if (Z.equals(u.ONE) || Z.equals(u.NEG_ONE)) { return u.MIN_VALUE } else { if (Z.equals(u.MIN_VALUE)) { return u.ONE } else { var aa = this.shiftRight(1); ae = aa.divide(Z).shiftLeft(1); if (ae.equals(u.ZERO)) { return Z.isNegative() ? u.ONE : u.NEG_ONE } else { ag = this.subtract(Z.multiply(ae)); ac = ae.add(ag.divide(Z)); return ac } } } } else { if (Z.equals(u.MIN_VALUE)) { return this.unsigned ? u.UZERO : u.ZERO } } if (this.isNegative()) { if (Z.isNegative()) { return this.negate().divide(Z.negate()) } return this.negate().divide(Z).negate() } else { if (Z.isNegative()) { return this.divide(Z.negate()).negate() } } ac = u.ZERO; ag = this; while (ag.greaterThanOrEqual(Z)) { ae = Math.max(1, Math.floor(ag.toNumber() / Z.toNumber())); var ah = Math.ceil(Math.log(ae) / Math.LN2), af = (ah <= 48) ? 1 : Math.pow(2, ah - 48), ab = u.fromNumber(ae), ad = ab.multiply(Z); while (ad.isNegative() || ad.greaterThan(ag)) { ae -= af; ab = u.fromNumber(ae, this.unsigned); ad = ab.multiply(Z) } if (ab.isZero()) { ab = u.ONE } ac = ac.add(ab); ag = ag.subtract(ad) } return ac }; u.prototype.div = u.prototype.divide; u.prototype.modulo = function W(Z) { if (!u.isLong(Z)) { Z = u.fromValue(Z) } return this.subtract(this.divide(Z).multiply(Z)) }; u.prototype.mod = u.prototype.modulo; u.prototype.not = function O() { return u.fromBits(~this.low, ~this.high, this.unsigned) }; u.prototype.and = function N(Z) { if (!u.isLong(Z)) { Z = u.fromValue(Z) } return u.fromBits(this.low & Z.low, this.high & Z.high, this.unsigned) }; u.prototype.or = function D(Z) { if (!u.isLong(Z)) { Z = u.fromValue(Z) } return u.fromBits(this.low | Z.low, this.high | Z.high, this.unsigned) }; u.prototype.xor = function K(Z) { if (!u.isLong(Z)) { Z = u.fromValue(Z) } return u.fromBits(this.low ^ Z.low, this.high ^ Z.high, this.unsigned) }; u.prototype.shiftLeft = function s(Z) { if (u.isLong(Z)) { Z = Z.toInt() } if ((Z &= 63) === 0) { return this } else { if (Z < 32) { return u.fromBits(this.low << Z, (this.high << Z) | (this.low >>> (32 - Z)), this.unsigned) } else { return u.fromBits(0, this.low << (Z - 32), this.unsigned) } } }; u.prototype.shl = u.prototype.shiftLeft; u.prototype.shiftRight = function e(Z) { if (u.isLong(Z)) { Z = Z.toInt() } if ((Z &= 63) === 0) { return this } else { if (Z < 32) { return u.fromBits((this.low >>> Z) | (this.high << (32 - Z)), this.high >> Z, this.unsigned) } else { return u.fromBits(this.high >> (Z - 32), this.high >= 0 ? 0 : -1, this.unsigned) } } }; u.prototype.shr = u.prototype.shiftRight; u.prototype.shiftRightUnsigned = function v(ab) { if (u.isLong(ab)) { ab = ab.toInt() } ab &= 63; if (ab === 0) { return this } else { var aa = this.high; if (ab < 32) { var Z = this.low; return u.fromBits((Z >>> ab) | (aa << (32 - ab)), aa >>> ab, this.unsigned) } else { if (ab === 32) { return u.fromBits(aa, 0, this.unsigned) } else { return u.fromBits(aa >>> (ab - 32), 0, this.unsigned) } } } }; u.prototype.shru = u.prototype.shiftRightUnsigned; u.prototype.toSigned = function Y() { if (!this.unsigned) { return this } return new u(this.low, this.high, false) }; u.prototype.toUnsigned = function w() { if (this.unsigned) { return this } return new u(this.low, this.high, true) }; return u }); (function (b) { function a(f) { var j = function (m, o, n) { if (typeof m === "undefined") { m = j.DEFAULT_CAPACITY } if (typeof o === "undefined") { o = j.DEFAULT_ENDIAN } if (typeof n === "undefined") { n = j.DEFAULT_NOASSERT } if (!n) { m = m | 0; if (m < 0) { throw RangeError("Illegal capacity") } o = !!o; n = !!n } this.buffer = m === 0 ? l : new ArrayBuffer(m); this.view = m === 0 ? null : new DataView(this.buffer); this.offset = 0; this.markedOffset = -1; this.limit = m; this.littleEndian = typeof o !== "undefined" ? !!o : false; this.noAssert = !!n }; j.VERSION = "3.5.5"; j.LITTLE_ENDIAN = true; j.BIG_ENDIAN = false; j.DEFAULT_CAPACITY = 16; j.DEFAULT_ENDIAN = j.BIG_ENDIAN; j.DEFAULT_NOASSERT = false; j.Long = f || null; var g = j.prototype; var l = new ArrayBuffer(0); var h = String.fromCharCode; function c(n) { var m = 0; return function () { return m < n.length ? n.charCodeAt(m++) : null } } function d() { var m = [], n = []; return function () { if (arguments.length === 0) { return n.join("") + h.apply(String, m) } if (m.length + arguments.length > 1024) { n.push(h.apply(String, m)), m.length = 0 } Array.prototype.push.apply(m, arguments) } } j.allocate = function (m, o, n) { return new j(m, o, n) }; j.concat = function (w, o, n, v) { if (typeof o === "boolean" || typeof o !== "string") { v = n; n = o; o = undefined } var m = 0; for (var s = 0, r = w.length, p; s < r; ++s) { if (!j.isByteBuffer(w[s])) { w[s] = j.wrap(w[s], o) } p = w[s].limit - w[s].offset; if (p > 0) { m += p } } if (m === 0) { return new j(0, n, v) } var t = new j(m, n, v), q; var u = new Uint8Array(t.buffer); s = 0; while (s < r) { q = w[s++]; p = q.limit - q.offset; if (p <= 0) { continue } u.set(new Uint8Array(q.buffer).subarray(q.offset, q.limit), t.offset); t.offset += p } t.limit = t.offset; t.offset = 0; return t }; j.isByteBuffer = function (m) { return (m && m instanceof j) === true }; j.type = function () { return ArrayBuffer }; j.wrap = function (m, n, p, o) { if (typeof n !== "string") { o = p; p = n; n = undefined } if (typeof m === "string") { if (typeof n === "undefined") { n = "utf8" } switch (n) { case "base64": return j.fromBase64(m, p); case "hex": return j.fromHex(m, p); case "binary": return j.fromBinary(m, p); case "utf8": return j.fromUTF8(m, p); case "debug": return j.fromDebug(m, p); default: throw Error("Unsupported encoding: " + n) } } if (m === null || typeof m !== "object") { throw TypeError("Illegal buffer") } var q; if (j.isByteBuffer(m)) { q = g.clone.call(m); q.markedOffset = -1; return q } if (m instanceof Uint8Array) { q = new j(0, p, o); if (m.length > 0) { q.buffer = m.buffer; q.offset = m.byteOffset; q.limit = m.byteOffset + m.length; q.view = m.length > 0 ? new DataView(m.buffer) : null } } else { if (m instanceof ArrayBuffer) { q = new j(0, p, o); if (m.byteLength > 0) { q.buffer = m; q.offset = 0; q.limit = m.byteLength; q.view = m.byteLength > 0 ? new DataView(m) : null } } else { if (Object.prototype.toString.call(m) === "[object Array]") { q = new j(m.length, p, o); q.limit = m.length; for (i = 0; i < m.length; ++i) { q.view.setUint8(i, m[i]) } } else { throw TypeError("Illegal buffer") } } } return q }; g.writeInt8 = function (o, p) { var n = typeof p === "undefined"; if (n) { p = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal value: " + o + " (not an integer)") } o |= 0; if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 1; var m = this.buffer.byteLength; if (p > m) { this.resize((m *= 2) > p ? m : p) } p -= 1; this.view.setInt8(p, o); if (n) { this.offset += 1 } return this }; g.writeByte = g.writeInt8; g.readInt8 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 1 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 1 + ") <= " + this.buffer.byteLength) } } var m = this.view.getInt8(o); if (n) { this.offset += 1 } return m }; g.readByte = g.readInt8; g.writeUint8 = function (o, p) { var n = typeof p === "undefined"; if (n) { p = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal value: " + o + " (not an integer)") } o >>>= 0; if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 1; var m = this.buffer.byteLength; if (p > m) { this.resize((m *= 2) > p ? m : p) } p -= 1; this.view.setUint8(p, o); if (n) { this.offset += 1 } return this }; g.readUint8 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 1 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 1 + ") <= " + this.buffer.byteLength) } } var m = this.view.getUint8(o); if (n) { this.offset += 1 } return m }; g.writeInt16 = function (o, p) { var n = typeof p === "undefined"; if (n) { p = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal value: " + o + " (not an integer)") } o |= 0; if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 2; var m = this.buffer.byteLength; if (p > m) { this.resize((m *= 2) > p ? m : p) } p -= 2; this.view.setInt16(p, o, this.littleEndian); if (n) { this.offset += 2 } return this }; g.writeShort = g.writeInt16; g.readInt16 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 2 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 2 + ") <= " + this.buffer.byteLength) } } var m = this.view.getInt16(o, this.littleEndian); if (n) { this.offset += 2 } return m }; g.readShort = g.readInt16; g.writeUint16 = function (o, p) { var n = typeof p === "undefined"; if (n) { p = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal value: " + o + " (not an integer)") } o >>>= 0; if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 2; var m = this.buffer.byteLength; if (p > m) { this.resize((m *= 2) > p ? m : p) } p -= 2; this.view.setUint16(p, o, this.littleEndian); if (n) { this.offset += 2 } return this }; g.readUint16 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 2 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 2 + ") <= " + this.buffer.byteLength) } } var m = this.view.getUint16(o, this.littleEndian); if (n) { this.offset += 2 } return m }; g.writeInt32 = function (o, p) { var n = typeof p === "undefined"; if (n) { p = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal value: " + o + " (not an integer)") } o |= 0; if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 4; var m = this.buffer.byteLength; if (p > m) { this.resize((m *= 2) > p ? m : p) } p -= 4; this.view.setInt32(p, o, this.littleEndian); if (n) { this.offset += 4 } return this }; g.writeInt = g.writeInt32; g.readInt32 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 4 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 4 + ") <= " + this.buffer.byteLength) } } var m = this.view.getInt32(o, this.littleEndian); if (n) { this.offset += 4 } return m }; g.readInt = g.readInt32; g.writeUint32 = function (o, p) { var n = typeof p === "undefined"; if (n) { p = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal value: " + o + " (not an integer)") } o >>>= 0; if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 4; var m = this.buffer.byteLength; if (p > m) { this.resize((m *= 2) > p ? m : p) } p -= 4; this.view.setUint32(p, o, this.littleEndian); if (n) { this.offset += 4 } return this }; g.readUint32 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 4 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 4 + ") <= " + this.buffer.byteLength) } } var m = this.view.getUint32(o, this.littleEndian); if (n) { this.offset += 4 } return m }; if (f) { g.writeInt64 = function (n, o) { var m = typeof o === "undefined"; if (m) { o = this.offset } if (!this.noAssert) { if (typeof n === "number") { n = f.fromNumber(n) } else { if (typeof n === "string") { n = f.fromString(n) } else { if (!(n && n instanceof f)) { throw TypeError("Illegal value: " + n + " (not an integer or Long)") } } } if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 0 + ") <= " + this.buffer.byteLength) } } if (typeof n === "number") { n = f.fromNumber(n) } else { if (typeof n === "string") { n = f.fromString(n) } } o += 8; var p = this.buffer.byteLength; if (o > p) { this.resize((p *= 2) > o ? p : o) } o -= 8; if (this.littleEndian) { this.view.setInt32(o, n.low, true); this.view.setInt32(o + 4, n.high, true) } else { this.view.setInt32(o, n.high, false); this.view.setInt32(o + 4, n.low, false) } if (m) { this.offset += 8 } return this }; g.writeLong = g.writeInt64; g.readInt64 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 8 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 8 + ") <= " + this.buffer.byteLength) } } var m = this.littleEndian ? new f(this.view.getInt32(o, true), this.view.getInt32(o + 4, true), false) : new f(this.view.getInt32(o + 4, false), this.view.getInt32(o, false), false); if (n) { this.offset += 8 } return m }; g.readLong = g.readInt64; g.writeUint64 = function (n, p) { var m = typeof p === "undefined"; if (m) { p = this.offset } if (!this.noAssert) { if (typeof n === "number") { n = f.fromNumber(n) } else { if (typeof n === "string") { n = f.fromString(n) } else { if (!(n && n instanceof f)) { throw TypeError("Illegal value: " + n + " (not an integer or Long)") } } } if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } if (typeof n === "number") { n = f.fromNumber(n) } else { if (typeof n === "string") { n = f.fromString(n) } } p += 8; var o = this.buffer.byteLength; if (p > o) { this.resize((o *= 2) > p ? o : p) } p -= 8; if (this.littleEndian) { this.view.setInt32(p, n.low, true); this.view.setInt32(p + 4, n.high, true) } else { this.view.setInt32(p, n.high, false); this.view.setInt32(p + 4, n.low, false) } if (m) { this.offset += 8 } return this }; g.readUint64 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 8 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 8 + ") <= " + this.buffer.byteLength) } } var m = this.littleEndian ? new f(this.view.getInt32(o, true), this.view.getInt32(o + 4, true), true) : new f(this.view.getInt32(o + 4, false), this.view.getInt32(o, false), true); if (n) { this.offset += 8 } return m } } g.writeFloat32 = function (n, p) { var m = typeof p === "undefined"; if (m) { p = this.offset } if (!this.noAssert) { if (typeof n !== "number") { throw TypeError("Illegal value: " + n + " (not a number)") } if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 4; var o = this.buffer.byteLength; if (p > o) { this.resize((o *= 2) > p ? o : p) } p -= 4; this.view.setFloat32(p, n, this.littleEndian); if (m) { this.offset += 4 } return this }; g.writeFloat = g.writeFloat32; g.readFloat32 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 4 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 4 + ") <= " + this.buffer.byteLength) } } var m = this.view.getFloat32(o, this.littleEndian); if (n) { this.offset += 4 } return m }; g.readFloat = g.readFloat32; g.writeFloat64 = function (o, p) { var n = typeof p === "undefined"; if (n) { p = this.offset } if (!this.noAssert) { if (typeof o !== "number") { throw TypeError("Illegal value: " + o + " (not a number)") } if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } p += 8; var m = this.buffer.byteLength; if (p > m) { this.resize((m *= 2) > p ? m : p) } p -= 8; this.view.setFloat64(p, o, this.littleEndian); if (n) { this.offset += 8 } return this }; g.writeDouble = g.writeFloat64; g.readFloat64 = function (o) { var n = typeof o === "undefined"; if (n) { o = this.offset } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal offset: " + o + " (not an integer)") } o >>>= 0; if (o < 0 || o + 8 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + o + " (+" + 8 + ") <= " + this.buffer.byteLength) } } var m = this.view.getFloat64(o, this.littleEndian); if (n) { this.offset += 8 } return m }; g.readDouble = g.readFloat64; j.MAX_VARINT32_BYTES = 5; j.calculateVarint32 = function (m) { m = m >>> 0; if (m < 1 << 7) { return 1 } else { if (m < 1 << 14) { return 2 } else { if (m < 1 << 21) { return 3 } else { if (m < 1 << 28) { return 4 } else { return 5 } } } } }; j.zigZagEncode32 = function (m) { return (((m |= 0) << 1) ^ (m >> 31)) >>> 0 }; j.zigZagDecode32 = function (m) { return ((m >>> 1) ^ -(m & 1)) | 0 }; g.writeVarint32 = function (q, r) { var p = typeof r === "undefined"; if (p) { r = this.offset } if (!this.noAssert) { if (typeof q !== "number" || q % 1 !== 0) { throw TypeError("Illegal value: " + q + " (not an integer)") } q |= 0; if (typeof r !== "number" || r % 1 !== 0) { throw TypeError("Illegal offset: " + r + " (not an integer)") } r >>>= 0; if (r < 0 || r + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + r + " (+" + 0 + ") <= " + this.buffer.byteLength) } } var n = j.calculateVarint32(q), m; r += n; var o = this.buffer.byteLength; if (r > o) { this.resize((o *= 2) > r ? o : r) } r -= n; this.view.setUint8(r, m = q | 128); q >>>= 0; if (q >= 1 << 7) { m = (q >> 7) | 128; this.view.setUint8(r + 1, m); if (q >= 1 << 14) { m = (q >> 14) | 128; this.view.setUint8(r + 2, m); if (q >= 1 << 21) { m = (q >> 21) | 128; this.view.setUint8(r + 3, m); if (q >= 1 << 28) { this.view.setUint8(r + 4, (q >> 28) & 15); n = 5 } else { this.view.setUint8(r + 3, m & 127); n = 4 } } else { this.view.setUint8(r + 2, m & 127); n = 3 } } else { this.view.setUint8(r + 1, m & 127); n = 2 } } else { this.view.setUint8(r, m & 127); n = 1 } if (p) { this.offset += n; return this } return n }; g.writeVarint32ZigZag = function (m, n) { return this.writeVarint32(j.zigZagEncode32(m), n) }; g.readVarint32 = function (s) { var q = typeof s === "undefined"; if (q) { s = this.offset } if (!this.noAssert) { if (typeof s !== "number" || s % 1 !== 0) { throw TypeError("Illegal offset: " + s + " (not an integer)") } s >>>= 0; if (s < 0 || s + 1 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + s + " (+" + 1 + ") <= " + this.buffer.byteLength) } } var n = 0, p = 0 >>> 0, m, r; do { r = s + n; if (!this.noAssert && r > this.limit) { var o = Error("Truncated"); o.truncated = true; throw o } m = this.view.getUint8(r); if (n < 5) { p |= ((m & 127) << (7 * n)) >>> 0 } ++n } while ((m & 128) === 128); p = p | 0; if (q) { this.offset += n; return p } return { value: p, length: n } }; g.readVarint32ZigZag = function (n) { var m = this.readVarint32(n); if (typeof m === "object") { m.value = j.zigZagDecode32(m.value) } else { m = j.zigZagDecode32(m) } return m }; if (f) { j.MAX_VARINT64_BYTES = 10; j.calculateVarint64 = function (n) { if (typeof n === "number") { n = f.fromNumber(n) } else { if (typeof n === "string") { n = f.fromString(n) } } var p = n.toInt() >>> 0, o = n.shiftRightUnsigned(28).toInt() >>> 0, m = n.shiftRightUnsigned(56).toInt() >>> 0; if (m == 0) { if (o == 0) { if (p < 1 << 14) { return p < 1 << 7 ? 1 : 2 } else { return p < 1 << 21 ? 3 : 4 } } else { if (o < 1 << 14) { return o < 1 << 7 ? 5 : 6 } else { return o < 1 << 21 ? 7 : 8 } } } else { return m < 1 << 7 ? 9 : 10 } }; j.zigZagEncode64 = function (m) { if (typeof m === "number") { m = f.fromNumber(m, false) } else { if (typeof m === "string") { m = f.fromString(m, false) } else { if (m.unsigned !== false) { m = m.toSigned() } } } return m.shiftLeft(1).xor(m.shiftRight(63)).toUnsigned() }; j.zigZagDecode64 = function (m) { if (typeof m === "number") { m = f.fromNumber(m, false) } else { if (typeof m === "string") { m = f.fromString(m, false) } else { if (m.unsigned !== false) { m = m.toSigned() } } } return m.shiftRightUnsigned(1).xor(m.and(f.ONE).toSigned().negate()).toSigned() }; g.writeVarint64 = function (q, t) { var p = typeof t === "undefined"; if (p) { t = this.offset } if (!this.noAssert) { if (typeof q === "number") { q = f.fromNumber(q) } else { if (typeof q === "string") { q = f.fromString(q) } else { if (!(q && q instanceof f)) { throw TypeError("Illegal value: " + q + " (not an integer or Long)") } } } if (typeof t !== "number" || t % 1 !== 0) { throw TypeError("Illegal offset: " + t + " (not an integer)") } t >>>= 0; if (t < 0 || t + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + t + " (+" + 0 + ") <= " + this.buffer.byteLength) } } if (typeof q === "number") { q = f.fromNumber(q, false) } else { if (typeof q === "string") { q = f.fromString(q, false) } else { if (q.unsigned !== false) { q = q.toSigned() } } } var m = j.calculateVarint64(q), s = q.toInt() >>> 0, r = q.shiftRightUnsigned(28).toInt() >>> 0, o = q.shiftRightUnsigned(56).toInt() >>> 0; t += m; var n = this.buffer.byteLength; if (t > n) { this.resize((n *= 2) > t ? n : t) } t -= m; switch (m) { case 10: this.view.setUint8(t + 9, (o >>> 7) & 1); case 9: this.view.setUint8(t + 8, m !== 9 ? (o) | 128 : (o) & 127); case 8: this.view.setUint8(t + 7, m !== 8 ? (r >>> 21) | 128 : (r >>> 21) & 127); case 7: this.view.setUint8(t + 6, m !== 7 ? (r >>> 14) | 128 : (r >>> 14) & 127); case 6: this.view.setUint8(t + 5, m !== 6 ? (r >>> 7) | 128 : (r >>> 7) & 127); case 5: this.view.setUint8(t + 4, m !== 5 ? (r) | 128 : (r) & 127); case 4: this.view.setUint8(t + 3, m !== 4 ? (s >>> 21) | 128 : (s >>> 21) & 127); case 3: this.view.setUint8(t + 2, m !== 3 ? (s >>> 14) | 128 : (s >>> 14) & 127); case 2: this.view.setUint8(t + 1, m !== 2 ? (s >>> 7) | 128 : (s >>> 7) & 127); case 1: this.view.setUint8(t, m !== 1 ? (s) | 128 : (s) & 127) } if (p) { this.offset += m; return this } else { return m } }; g.writeVarint64ZigZag = function (m, n) { return this.writeVarint64(j.zigZagEncode64(m), n) }; g.readVarint64 = function (s) { var p = typeof s === "undefined"; if (p) { s = this.offset } if (!this.noAssert) { if (typeof s !== "number" || s % 1 !== 0) { throw TypeError("Illegal offset: " + s + " (not an integer)") } s >>>= 0; if (s < 0 || s + 1 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + s + " (+" + 1 + ") <= " + this.buffer.byteLength) } } var t = s, r = 0, q = 0, o = 0, m = 0; m = this.view.getUint8(s++); r = (m & 127); if (m & 128) { m = this.view.getUint8(s++); r |= (m & 127) << 7; if (m & 128) { m = this.view.getUint8(s++); r |= (m & 127) << 14; if (m & 128) { m = this.view.getUint8(s++); r |= (m & 127) << 21; if (m & 128) { m = this.view.getUint8(s++); q = (m & 127); if (m & 128) { m = this.view.getUint8(s++); q |= (m & 127) << 7; if (m & 128) { m = this.view.getUint8(s++); q |= (m & 127) << 14; if (m & 128) { m = this.view.getUint8(s++); q |= (m & 127) << 21; if (m & 128) { m = this.view.getUint8(s++); o = (m & 127); if (m & 128) { m = this.view.getUint8(s++); o |= (m & 127) << 7; if (m & 128) { throw Error("Buffer overrun") } } } } } } } } } } var n = f.fromBits(r | (q << 28), (q >>> 4) | (o) << 24, false); if (p) { this.offset = s; return n } else { return { value: n, length: s - t } } }; g.readVarint64ZigZag = function (n) { var m = this.readVarint64(n); if (m && m.value instanceof f) { m.value = j.zigZagDecode64(m.value) } else { m = j.zigZagDecode64(m) } return m } } g.writeCString = function (r, q) { var p = typeof q === "undefined"; if (p) { q = this.offset } var n, m = r.length; if (!this.noAssert) { if (typeof r !== "string") { throw TypeError("Illegal str: Not a string") } for (n = 0; n < m; ++n) { if (r.charCodeAt(n) === 0) { throw RangeError("Illegal str: Contains NULL-characters") } } if (typeof q !== "number" || q % 1 !== 0) { throw TypeError("Illegal offset: " + q + " (not an integer)") } q >>>= 0; if (q < 0 || q + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + q + " (+" + 0 + ") <= " + this.buffer.byteLength) } } m = k.calculateUTF16asUTF8(c(r))[1]; q += m + 1; var o = this.buffer.byteLength; if (q > o) { this.resize((o *= 2) > q ? o : q) } q -= m + 1; k.encodeUTF16toUTF8(c(r), function (s) { this.view.setUint8(q++, s) }.bind(this)); this.view.setUint8(q++, 0); if (p) { this.offset = q; return this } return m }; g.readCString = function (q) { var o = typeof q === "undefined"; if (o) { q = this.offset } if (!this.noAssert) { if (typeof q !== "number" || q % 1 !== 0) { throw TypeError("Illegal offset: " + q + " (not an integer)") } q >>>= 0; if (q < 0 || q + 1 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + q + " (+" + 1 + ") <= " + this.buffer.byteLength) } } var r = q, n; var p, m = -1; k.decodeUTF8toUTF16(function () { if (m === 0) { return null } if (q >= this.limit) { throw RangeError("Illegal range: Truncated data, " + q + " < " + this.limit) } return (m = this.view.getUint8(q++)) === 0 ? null : m }.bind(this), p = d(), true); if (o) { this.offset = q; return p() } else { return { string: p(), length: q - r } } }; g.writeIString = function (q, p) { var o = typeof p === "undefined"; if (o) { p = this.offset } if (!this.noAssert) { if (typeof q !== "string") { throw TypeError("Illegal str: Not a string") } if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } var r = p, m; m = k.calculateUTF16asUTF8(c(q), this.noAssert)[1]; p += 4 + m; var n = this.buffer.byteLength; if (p > n) { this.resize((n *= 2) > p ? n : p) } p -= 4 + m; this.view.setUint32(p, m, this.littleEndian); p += 4; k.encodeUTF16toUTF8(c(q), function (s) { this.view.setUint8(p++, s) }.bind(this)); if (p !== r + 4 + m) { throw RangeError("Illegal range: Truncated data, " + p + " == " + (p + 4 + m)) } if (o) { this.offset = p; return this } return p - r }; g.readIString = function (r) { var o = typeof r === "undefined"; if (o) { r = this.offset } if (!this.noAssert) { if (typeof r !== "number" || r % 1 !== 0) { throw TypeError("Illegal offset: " + r + " (not an integer)") } r >>>= 0; if (r < 0 || r + 4 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + r + " (+" + 4 + ") <= " + this.buffer.byteLength) } } var n = 0, s = r, q; n = this.view.getUint32(r, this.littleEndian); r += 4; var m = r + n, p; k.decodeUTF8toUTF16(function () { return r < m ? this.view.getUint8(r++) : null }.bind(this), p = d(), this.noAssert); q = p(); if (o) { this.offset = r; return q } else { return { string: q, length: r - s } } }; j.METRICS_CHARS = "c"; j.METRICS_BYTES = "b"; g.writeUTF8String = function (q, p) { var o = typeof p === "undefined"; if (o) { p = this.offset } if (!this.noAssert) { if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal offset: " + p + " (not an integer)") } p >>>= 0; if (p < 0 || p + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + p + " (+" + 0 + ") <= " + this.buffer.byteLength) } } var m; var r = p; m = k.calculateUTF16asUTF8(c(q))[1]; p += m; var n = this.buffer.byteLength; if (p > n) { this.resize((n *= 2) > p ? n : p) } p -= m; k.encodeUTF16toUTF8(c(q), function (s) { this.view.setUint8(p++, s) }.bind(this)); if (o) { this.offset = p; return this } return p - r }; g.writeString = g.writeUTF8String; j.calculateUTF8Chars = function (m) { return k.calculateUTF16asUTF8(c(m))[0] }; j.calculateUTF8Bytes = function (m) { return k.calculateUTF16asUTF8(c(m))[1] }; g.readUTF8String = function (p, o, s) { if (typeof o === "number") { s = o; o = undefined } var q = typeof s === "undefined"; if (q) { s = this.offset } if (typeof o === "undefined") { o = j.METRICS_CHARS } if (!this.noAssert) { if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal length: " + p + " (not an integer)") } p |= 0; if (typeof s !== "number" || s % 1 !== 0) { throw TypeError("Illegal offset: " + s + " (not an integer)") } s >>>= 0; if (s < 0 || s + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + s + " (+" + 0 + ") <= " + this.buffer.byteLength) } } var n = 0, t = s, r; if (o === j.METRICS_CHARS) { r = d(); k.decodeUTF8(function () { return n < p && s < this.limit ? this.view.getUint8(s++) : null }.bind(this), function (u) { ++n; k.UTF8toUTF16(u, r) }.bind(this)); if (n !== p) { throw RangeError("Illegal range: Truncated data, " + n + " == " + p) } if (q) { this.offset = s; return r() } else { return { string: r(), length: s - t } } } else { if (o === j.METRICS_BYTES) { if (!this.noAssert) { if (typeof s !== "number" || s % 1 !== 0) { throw TypeError("Illegal offset: " + s + " (not an integer)") } s >>>= 0; if (s < 0 || s + p > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + s + " (+" + p + ") <= " + this.buffer.byteLength) } } var m = s + p; k.decodeUTF8toUTF16(function () { return s < m ? this.view.getUint8(s++) : null }.bind(this), r = d(), this.noAssert); if (s !== m) { throw RangeError("Illegal range: Truncated data, " + s + " == " + m) } if (q) { this.offset = s; return r() } else { return { string: r(), length: s - t } } } else { throw TypeError("Unsupported metrics: " + o) } } }; g.readString = g.readUTF8String; g.writeVString = function (r, q) { var p = typeof q === "undefined"; if (p) { q = this.offset } if (!this.noAssert) { if (typeof r !== "string") { throw TypeError("Illegal str: Not a string") } if (typeof q !== "number" || q % 1 !== 0) { throw TypeError("Illegal offset: " + q + " (not an integer)") } q >>>= 0; if (q < 0 || q + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + q + " (+" + 0 + ") <= " + this.buffer.byteLength) } } var s = q, o, m; o = k.calculateUTF16asUTF8(c(r), this.noAssert)[1]; m = j.calculateVarint32(o); q += m + o; var n = this.buffer.byteLength; if (q > n) { this.resize((n *= 2) > q ? n : q) } q -= m + o; q += this.writeVarint32(o, q); k.encodeUTF16toUTF8(c(r), function (t) { this.view.setUint8(q++, t) }.bind(this)); if (q !== s + o + m) { throw RangeError("Illegal range: Truncated data, " + q + " == " + (q + o + m)) } if (p) { this.offset = q; return this } return q - s }; g.readVString = function (r) { var o = typeof r === "undefined"; if (o) { r = this.offset } if (!this.noAssert) { if (typeof r !== "number" || r % 1 !== 0) { throw TypeError("Illegal offset: " + r + " (not an integer)") } r >>>= 0; if (r < 0 || r + 1 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + r + " (+" + 1 + ") <= " + this.buffer.byteLength) } } var n = this.readVarint32(r), s = r, q; r += n.length; n = n.value; var m = r + n, p = d(); k.decodeUTF8toUTF16(function () { return r < m ? this.view.getUint8(r++) : null }.bind(this), p, this.noAssert); q = p(); if (o) { this.offset = r; return q } else { return { string: q, length: r - s } } }; g.append = function (q, o, r) { if (typeof o === "number" || typeof o !== "string") { r = o; o = undefined } var p = typeof r === "undefined"; if (p) { r = this.offset } if (!this.noAssert) { if (typeof r !== "number" || r % 1 !== 0) { throw TypeError("Illegal offset: " + r + " (not an integer)") } r >>>= 0; if (r < 0 || r + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + r + " (+" + 0 + ") <= " + this.buffer.byteLength) } } if (!(q instanceof j)) { q = j.wrap(q, o) } var n = q.limit - q.offset; if (n <= 0) { return this } r += n; var m = this.buffer.byteLength; if (r > m) { this.resize((m *= 2) > r ? m : r) } r -= n; new Uint8Array(this.buffer, r).set(new Uint8Array(q.buffer).subarray(q.offset, q.limit)); q.offset += n; if (p) { this.offset += n } return this }; g.appendTo = function (m, n) { m.append(this, n); return this }; g.assert = function (m) { this.noAssert = !m; return this }; g.capacity = function () { return this.buffer.byteLength }; g.clear = function () { this.offset = 0; this.limit = this.buffer.byteLength; this.markedOffset = -1; return this }; g.clone = function (o) { var n = new j(0, this.littleEndian, this.noAssert); if (o) { var m = new ArrayBuffer(this.buffer.byteLength); new Uint8Array(m).set(this.buffer); n.buffer = m; n.view = new DataView(m) } else { n.buffer = this.buffer; n.view = this.view } n.offset = this.offset; n.markedOffset = this.markedOffset; n.limit = this.limit; return n }; g.compact = function (p, o) { if (typeof p === "undefined") { p = this.offset } if (typeof o === "undefined") { o = this.limit } if (!this.noAssert) { if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } p >>>= 0; if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } o >>>= 0; if (p < 0 || p > o || o > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + p + " <= " + o + " <= " + this.buffer.byteLength) } } if (p === 0 && o === this.buffer.byteLength) { return this } var m = o - p; if (m === 0) { this.buffer = l; this.view = null; if (this.markedOffset >= 0) { this.markedOffset -= p } this.offset = 0; this.limit = 0; return this } var n = new ArrayBuffer(m); new Uint8Array(n).set(new Uint8Array(this.buffer).subarray(p, o)); this.buffer = n; this.view = new DataView(n); if (this.markedOffset >= 0) { this.markedOffset -= p } this.offset = 0; this.limit = m; return this }; g.copy = function (o, m) { if (typeof o === "undefined") { o = this.offset } if (typeof m === "undefined") { m = this.limit } if (!this.noAssert) { if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } o >>>= 0; if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } m >>>= 0; if (o < 0 || o > m || m > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + o + " <= " + m + " <= " + this.buffer.byteLength) } } if (o === m) { return new j(0, this.littleEndian, this.noAssert) } var n = m - o, p = new j(n, this.littleEndian, this.noAssert); p.offset = 0; p.limit = n; if (p.markedOffset >= 0) { p.markedOffset -= o } this.copyTo(p, 0, o, m); return p }; g.copyTo = function (q, s, o, r) { var p, n; if (!this.noAssert) { if (!j.isByteBuffer(q)) { throw TypeError("Illegal target: Not a ByteBuffer") } } s = (n = typeof s === "undefined") ? q.offset : s | 0; o = (p = typeof o === "undefined") ? this.offset : o | 0; r = typeof r === "undefined" ? this.limit : r | 0; if (s < 0 || s > q.buffer.byteLength) { throw RangeError("Illegal target range: 0 <= " + s + " <= " + q.buffer.byteLength) } if (o < 0 || r > this.buffer.byteLength) { throw RangeError("Illegal source range: 0 <= " + o + " <= " + this.buffer.byteLength) } var m = r - o; if (m === 0) { return q } q.ensureCapacity(s + m); new Uint8Array(q.buffer).set(new Uint8Array(this.buffer).subarray(o, r), s); if (p) { this.offset += m } if (n) { q.offset += m } return this }; g.ensureCapacity = function (m) { var n = this.buffer.byteLength; if (n < m) { return this.resize((n *= 2) > m ? n : m) } return this }; g.fill = function (p, n, m) { var o = typeof n === "undefined"; if (o) { n = this.offset } if (typeof p === "string" && p.length > 0) { p = p.charCodeAt(0) } if (typeof n === "undefined") { n = this.offset } if (typeof m === "undefined") { m = this.limit } if (!this.noAssert) { if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal value: " + p + " (not an integer)") } p |= 0; if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } n >>>= 0; if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } m >>>= 0; if (n < 0 || n > m || m > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + n + " <= " + m + " <= " + this.buffer.byteLength) } } if (n >= m) { return this } while (n < m) { this.view.setUint8(n++, p) } if (o) { this.offset = n } return this }; g.flip = function () { this.limit = this.offset; this.offset = 0; return this }; g.mark = function (m) { m = typeof m === "undefined" ? this.offset : m; if (!this.noAssert) { if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal offset: " + m + " (not an integer)") } m >>>= 0; if (m < 0 || m + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + m + " (+" + 0 + ") <= " + this.buffer.byteLength) } } this.markedOffset = m; return this }; g.order = function (m) { if (!this.noAssert) { if (typeof m !== "boolean") { throw TypeError("Illegal littleEndian: Not a boolean") } } this.littleEndian = !!m; return this }; g.LE = function (m) { this.littleEndian = typeof m !== "undefined" ? !!m : true; return this }; g.BE = function (m) { this.littleEndian = typeof m !== "undefined" ? !m : false; return this }; g.prepend = function (r, p, t) { if (typeof p === "number" || typeof p !== "string") { t = p; p = undefined } var q = typeof t === "undefined"; if (q) { t = this.offset } if (!this.noAssert) { if (typeof t !== "number" || t % 1 !== 0) { throw TypeError("Illegal offset: " + t + " (not an integer)") } t >>>= 0; if (t < 0 || t + 0 > this.buffer.byteLength) { throw RangeError("Illegal offset: 0 <= " + t + " (+" + 0 + ") <= " + this.buffer.byteLength) } } if (!(r instanceof j)) { r = j.wrap(r, p) } var m = r.limit - r.offset; if (m <= 0) { return this } var s = m - t; var o; if (s > 0) { var n = new ArrayBuffer(this.buffer.byteLength + s); o = new Uint8Array(n); o.set(new Uint8Array(this.buffer).subarray(t, this.buffer.byteLength), m); this.buffer = n; this.view = new DataView(n); this.offset += s; if (this.markedOffset >= 0) { this.markedOffset += s } this.limit += s; t += s } else { o = new Uint8Array(this.buffer) } o.set(new Uint8Array(r.buffer).subarray(r.offset, r.limit), t - m); r.offset = r.limit; if (q) { this.offset -= m } return this }; g.prependTo = function (m, n) { m.prepend(this, n); return this }; g.printDebug = function (m) { if (typeof m !== "function") { m = console.log.bind(console) } m(this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(true)) }; g.remaining = function () { return this.limit - this.offset }; g.reset = function () { if (this.markedOffset >= 0) { this.offset = this.markedOffset; this.markedOffset = -1 } else { this.offset = 0 } return this }; g.resize = function (n) { if (!this.noAssert) { if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal capacity: " + n + " (not an integer)") } n |= 0; if (n < 0) { throw RangeError("Illegal capacity: 0 <= " + n) } } if (this.buffer.byteLength < n) { var m = new ArrayBuffer(n); new Uint8Array(m).set(new Uint8Array(this.buffer)); this.buffer = m; this.view = new DataView(m) } return this }; g.reverse = function (n, m) { if (typeof n === "undefined") { n = this.offset } if (typeof m === "undefined") { m = this.limit } if (!this.noAssert) { if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } n >>>= 0; if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } m >>>= 0; if (n < 0 || n > m || m > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + n + " <= " + m + " <= " + this.buffer.byteLength) } } if (n === m) { return this } Array.prototype.reverse.call(new Uint8Array(this.buffer).subarray(n, m)); this.view = new DataView(this.buffer); return this }; g.skip = function (m) { if (!this.noAssert) { if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal length: " + m + " (not an integer)") } m |= 0 } var n = this.offset + m; if (!this.noAssert) { if (n < 0 || n > this.buffer.byteLength) { throw RangeError("Illegal length: 0 <= " + this.offset + " + " + m + " <= " + this.buffer.byteLength) } } this.offset = n; return this }; g.slice = function (n, m) { if (typeof n === "undefined") { n = this.offset } if (typeof m === "undefined") { m = this.limit } if (!this.noAssert) { if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } n >>>= 0; if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } m >>>= 0; if (n < 0 || n > m || m > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + n + " <= " + m + " <= " + this.buffer.byteLength) } } var o = this.clone(); o.offset = n; o.limit = m; return o }; g.toBuffer = function (m) { var q = this.offset, o = this.limit; if (q > o) { var p = q; q = o; o = p } if (!this.noAssert) { if (typeof q !== "number" || q % 1 !== 0) { throw TypeError("Illegal offset: Not an integer") } q >>>= 0; if (typeof o !== "number" || o % 1 !== 0) { throw TypeError("Illegal limit: Not an integer") } o >>>= 0; if (q < 0 || q > o || o > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + q + " <= " + o + " <= " + this.buffer.byteLength) } } if (!m && q === 0 && o === this.buffer.byteLength) { return this.buffer } if (q === o) { return l } var n = new ArrayBuffer(o - q); new Uint8Array(n).set(new Uint8Array(this.buffer).subarray(q, o), 0); return n }; g.toArrayBuffer = g.toBuffer; g.toString = function (o, n, m) { if (typeof o === "undefined") { return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")" } if (typeof o === "number") { o = "utf8", n = o, m = n } switch (o) { case "utf8": return this.toUTF8(n, m); case "base64": return this.toBase64(n, m); case "hex": return this.toHex(n, m); case "binary": return this.toBinary(n, m); case "debug": return this.toDebug(); case "columns": return this.toColumns(); default: throw Error("Unsupported encoding: " + o) } }; var e = function () { var n = {}; var q = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47]; var p = []; for (var o = 0, m = q.length; o < m; ++o) { p[q[o]] = o } n.encode = function (u, v) { var r, s; while ((r = u()) !== null) { v(q[(r >> 2) & 63]); s = (r & 3) << 4; if ((r = u()) !== null) { s |= (r >> 4) & 15; v(q[(s | ((r >> 4) & 15)) & 63]); s = (r & 15) << 2; if ((r = u()) !== null) { v(q[(s | ((r >> 6) & 3)) & 63]), v(q[r & 63]) } else { v(q[s & 63]), v(61) } } else { v(q[s & 63]), v(61), v(61) } } }; n.decode = function (u, w) { var v, t, s; function r(x) { throw Error("Illegal character code: " + x) } while ((v = u()) !== null) { t = p[v]; if (typeof t === "undefined") { r(v) } if ((v = u()) !== null) { s = p[v]; if (typeof s === "undefined") { r(v) } w((t << 2) >>> 0 | (s & 48) >> 4); if ((v = u()) !== null) { t = p[v]; if (typeof t === "undefined") { if (v === 61) { break } else { r(v) } } w(((s & 15) << 4) >>> 0 | (t & 60) >> 2); if ((v = u()) !== null) { s = p[v]; if (typeof s === "undefined") { if (v === 61) { break } else { r(v) } } w(((t & 3) << 6) >>> 0 | s) } } } } }; n.test = function (r) { return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(r) }; return n }(); g.toBase64 = function (n, m) { if (typeof n === "undefined") { n = this.offset } if (typeof m === "undefined") { m = this.limit } if (!this.noAssert) { if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } n >>>= 0; if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } m >>>= 0; if (n < 0 || n > m || m > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + n + " <= " + m + " <= " + this.buffer.byteLength) } } var o; e.encode(function () { return n < m ? this.view.getUint8(n++) : null }.bind(this), o = d()); return o() }; j.fromBase64 = function (q, o, n) { if (!n) { if (typeof q !== "string") { throw TypeError("Illegal str: Not a string") } if (q.length % 4 !== 0) { throw TypeError("Illegal str: Length not a multiple of 4") } } var p = new j(q.length / 4 * 3, o, n), m = 0; e.decode(c(q), function (r) { p.view.setUint8(m++, r) }); p.limit = m; return p }; j.btoa = function (m) { return j.fromBinary(m).toBase64() }; j.atob = function (m) { return j.fromBase64(m).toBinary() }; g.toBinary = function (n, m) { n = typeof n === "undefined" ? this.offset : n; m = typeof m === "undefined" ? this.limit : m; if (!this.noAssert) { if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } n >>>= 0; if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } m >>>= 0; if (n < 0 || n > m || m > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + n + " <= " + m + " <= " + this.buffer.byteLength) } } if (n === m) { return "" } var p = [], o = []; while (n < m) { p.push(this.view.getUint8(n++)); if (p.length >= 1024) { o.push(String.fromCharCode.apply(String, p)), p = [] } } return o.join("") + String.fromCharCode.apply(String, p) }; j.fromBinary = function (s, q, p) { if (!p) { if (typeof s !== "string") { throw TypeError("Illegal str: Not a string") } } var o = 0, n = s.length, m, r = new j(n, q, p); while (o < n) { m = s.charCodeAt(o); if (!p && m > 255) { throw RangeError("Illegal charCode at " + o + ": 0 <= " + m + " <= 255") } r.view.setUint8(o++, m) } r.limit = n; return r }; g.toDebug = function (q) { var p = -1, n = this.buffer.byteLength, m, s = "", r = "", o = ""; while (p < n) { if (p !== -1) { m = this.view.getUint8(p); if (m < 16) { s += "0" + m.toString(16).toUpperCase() } else { s += m.toString(16).toUpperCase() } if (q) { r += m > 32 && m < 127 ? String.fromCharCode(m) : "." } } ++p; if (q) { if (p > 0 && p % 16 === 0 && p !== n) { while (s.length < 3 * 16 + 3) { s += " " } o += s + r + "\n"; s = r = "" } } if (p === this.offset && p === this.limit) { s += p === this.markedOffset ? "!" : "|" } else { if (p === this.offset) { s += p === this.markedOffset ? "[" : "<" } else { if (p === this.limit) { s += p === this.markedOffset ? "]" : ">" } else { s += p === this.markedOffset ? "'" : (q || (p !== 0 && p !== n) ? " " : "") } } } } if (q && s !== " ") { while (s.length < 3 * 16 + 3) { s += " " } o += s + r + "\n" } return q ? o : s }; j.fromDebug = function (w, o, y) { var s = w.length, v = new j(((s + 1) / 3) | 0, o, y); var u = 0, t = 0, m, x, r = false, z = false, n = false, p = false, q = false; while (u < s) { switch (m = w.charAt(u++)) { case "!": if (!y) { if (z || n || p) { q = true; break } z = n = p = true } v.offset = v.markedOffset = v.limit = t; r = false; break; case "|": if (!y) { if (z || p) { q = true; break } z = p = true } v.offset = v.limit = t; r = false; break; case "[": if (!y) { if (z || n) { q = true; break } z = n = true } v.offset = v.markedOffset = t; r = false; break; case "<": if (!y) { if (z) { q = true; break } z = true } v.offset = t; r = false; break; case "]": if (!y) { if (p || n) { q = true; break } p = n = true } v.limit = v.markedOffset = t; r = false; break; case ">": if (!y) { if (p) { q = true; break } p = true } v.limit = t; r = false; break; case "'": if (!y) { if (n) { q = true; break } n = true } v.markedOffset = t; r = false; break; case " ": r = false; break; default: if (!y) { if (r) { q = true; break } } x = parseInt(m + w.charAt(u++), 16); if (!y) { if (isNaN(x) || x < 0 || x > 255) { throw TypeError("Illegal str: Not a debug encoded string") } } v.view.setUint8(t++, x); r = true } if (q) { throw TypeError("Illegal str: Invalid symbol at " + u) } } if (!y) { if (!z || !p) { throw TypeError("Illegal str: Missing offset or limit") } if (t < v.buffer.byteLength) { throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + t + " < " + s) } } return v }; g.toHex = function (p, n) { p = typeof p === "undefined" ? this.offset : p; n = typeof n === "undefined" ? this.limit : n; if (!this.noAssert) { if (typeof p !== "number" || p % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } p >>>= 0; if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } n >>>= 0; if (p < 0 || p > n || n > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + p + " <= " + n + " <= " + this.buffer.byteLength) } } var o = new Array(n - p), m; while (p < n) { m = this.view.getUint8(p++); if (m < 16) { o.push("0", m.toString(16)) } else { o.push(m.toString(16)) } } return o.join("") }; j.fromHex = function (t, r, q) { if (!q) { if (typeof t !== "string") { throw TypeError("Illegal str: Not a string") } if (t.length % 2 !== 0) { throw TypeError("Illegal str: Length not a multiple of 2") } } var n = t.length, s = new j((n / 2) | 0, r), m; for (var p = 0, o = 0; p < n; p += 2) { m = parseInt(t.substring(p, p + 2), 16); if (!q) { if (!isFinite(m) || m < 0 || m > 255) { throw TypeError("Illegal str: Contains non-hex characters") } } s.view.setUint8(o++, m) } s.limit = o; return s }; var k = function () { var m = {}; m.MAX_CODEPOINT = 1114111; m.encodeUTF8 = function (o, p) { var n = null; if (typeof o === "number") { n = o, o = function () { return null } } while (n !== null || (n = o()) !== null) { if (n < 128) { p(n & 127) } else { if (n < 2048) { p(((n >> 6) & 31) | 192), p((n & 63) | 128) } else { if (n < 65536) { p(((n >> 12) & 15) | 224), p(((n >> 6) & 63) | 128), p((n & 63) | 128) } else { p(((n >> 18) & 7) | 240), p(((n >> 12) & 63) | 128), p(((n >> 6) & 63) | 128), p((n & 63) | 128) } } } n = null } }; m.decodeUTF8 = function (r, t) { var p, n, s, q, o = function (u) { u = u.slice(0, u.indexOf(null)); var v = Error(u.toString()); v.name = "TruncatedError"; v.bytes = u; throw v }; while ((p = r()) !== null) { if ((p & 128) === 0) { t(p) } else { if ((p & 224) === 192) { ((n = r()) === null) && o([p, n]), t(((p & 31) << 6) | (n & 63)) } else { if ((p & 240) === 224) { ((n = r()) === null || (s = r()) === null) && o([p, n, s]), t(((p & 15) << 12) | ((n & 63) << 6) | (s & 63)) } else { if ((p & 248) === 240) { ((n = r()) === null || (s = r()) === null || (q = r()) === null) && o([p, n, s, q]), t(((p & 7) << 18) | ((n & 63) << 12) | ((s & 63) << 6) | (q & 63)) } else { throw RangeError("Illegal starting byte: " + p) } } } } } }; m.UTF16toUTF8 = function (p, q) { var o, n = null; while (true) { if ((o = n !== null ? n : p()) === null) { break } if (o >= 55296 && o <= 57343) { if ((n = p()) !== null) { if (n >= 56320 && n <= 57343) { q((o - 55296) * 1024 + n - 56320 + 65536); n = null; continue } } } q(o) } if (n !== null) { q(n) } }; m.UTF8toUTF16 = function (o, p) { var n = null; if (typeof o === "number") { n = o, o = function () { return null } } while (n !== null || (n = o()) !== null) { if (n <= 65535) { p(n) } else { n -= 65536, p((n >> 10) + 55296), p((n % 1024) + 56320) } n = null } }; m.encodeUTF16toUTF8 = function (n, o) { m.UTF16toUTF8(n, function (p) { m.encodeUTF8(p, o) }) }; m.decodeUTF8toUTF16 = function (n, o) { m.decodeUTF8(n, function (p) { m.UTF8toUTF16(p, o) }) }; m.calculateCodePoint = function (n) { return (n < 128) ? 1 : (n < 2048) ? 2 : (n < 65536) ? 3 : 4 }; m.calculateUTF8 = function (p) { var o, n = 0; while ((o = p()) !== null) { n += m.calculateCodePoint(o) } return n }; m.calculateUTF16asUTF8 = function (p) { var q = 0, o = 0; m.UTF16toUTF8(p, function (n) { ++q; o += m.calculateCodePoint(n) }); return [q, o] }; return m }(); g.toUTF8 = function (n, m) { if (typeof n === "undefined") { n = this.offset } if (typeof m === "undefined") { m = this.limit } if (!this.noAssert) { if (typeof n !== "number" || n % 1 !== 0) { throw TypeError("Illegal begin: Not an integer") } n >>>= 0; if (typeof m !== "number" || m % 1 !== 0) { throw TypeError("Illegal end: Not an integer") } m >>>= 0; if (n < 0 || n > m || m > this.buffer.byteLength) { throw RangeError("Illegal range: 0 <= " + n + " <= " + m + " <= " + this.buffer.byteLength) } } var p; try { k.decodeUTF8toUTF16(function () { return n < m ? this.view.getUint8(n++) : null }.bind(this), p = d()) } catch (o) { if (n !== m) { throw RangeError("Illegal range: Truncated data, " + n + " != " + m) } } return p() }; j.fromUTF8 = function (q, o, n) { if (!n) { if (typeof q !== "string") { throw TypeError("Illegal str: Not a string") } } var p = new j(k.calculateUTF16asUTF8(c(q), true)[1], o, n), m = 0; k.encodeUTF16toUTF8(c(q), function (r) { p.view.setUint8(m++, r) }); p.limit = m; return p }; return j } if (typeof require === "function" && typeof module === "object" && module && typeof exports === "object" && exports) { module.exports = (function () { var c; try { c = require("long") } catch (d) { } return a(c) })() } else { if (typeof define === "function" && define.amd) { define("ByteBuffer", ["Long"], function (c) { return a(c) }) } else { (b.dcodeIO = b.dcodeIO || {})["ByteBuffer"] = a(b.dcodeIO["Long"]) } } })(this); (function (b, a) { if (typeof define === "function" && define.amd) { define(["ByteBuffer"], a) } else { if (typeof require === "function" && typeof module === "object" && module && module.exports) { module.exports = a(require("ByteBuffer"), true) } else { (b.dcodeIO = b.dcodeIO || {})["ProtoBuf"] = a(b.dcodeIO["ByteBuffer"]) } } })(this, function (c, b) { var e = {}; e.ByteBuffer = c; e.Long = c.Long || null; e.VERSION = "5.0.1"; e.WIRE_TYPES = {}; e.WIRE_TYPES.VARINT = 0; e.WIRE_TYPES.BITS64 = 1; e.WIRE_TYPES.LDELIM = 2; e.WIRE_TYPES.STARTGROUP = 3; e.WIRE_TYPES.ENDGROUP = 4; e.WIRE_TYPES.BITS32 = 5; e.PACKABLE_WIRE_TYPES = [e.WIRE_TYPES.VARINT, e.WIRE_TYPES.BITS64, e.WIRE_TYPES.BITS32]; e.TYPES = { int32: { name: "int32", wireType: e.WIRE_TYPES.VARINT, defaultValue: 0 }, uint32: { name: "uint32", wireType: e.WIRE_TYPES.VARINT, defaultValue: 0 }, sint32: { name: "sint32", wireType: e.WIRE_TYPES.VARINT, defaultValue: 0 }, int64: { name: "int64", wireType: e.WIRE_TYPES.VARINT, defaultValue: e.Long ? e.Long.ZERO : undefined }, uint64: { name: "uint64", wireType: e.WIRE_TYPES.VARINT, defaultValue: e.Long ? e.Long.UZERO : undefined }, sint64: { name: "sint64", wireType: e.WIRE_TYPES.VARINT, defaultValue: e.Long ? e.Long.ZERO : undefined }, bool: { name: "bool", wireType: e.WIRE_TYPES.VARINT, defaultValue: false }, "double": { name: "double", wireType: e.WIRE_TYPES.BITS64, defaultValue: 0 }, string: { name: "string", wireType: e.WIRE_TYPES.LDELIM, defaultValue: "" }, bytes: { name: "bytes", wireType: e.WIRE_TYPES.LDELIM, defaultValue: null }, fixed32: { name: "fixed32", wireType: e.WIRE_TYPES.BITS32, defaultValue: 0 }, sfixed32: { name: "sfixed32", wireType: e.WIRE_TYPES.BITS32, defaultValue: 0 }, fixed64: { name: "fixed64", wireType: e.WIRE_TYPES.BITS64, defaultValue: e.Long ? e.Long.UZERO : undefined }, sfixed64: { name: "sfixed64", wireType: e.WIRE_TYPES.BITS64, defaultValue: e.Long ? e.Long.ZERO : undefined }, "float": { name: "float", wireType: e.WIRE_TYPES.BITS32, defaultValue: 0 }, "enum": { name: "enum", wireType: e.WIRE_TYPES.VARINT, defaultValue: 0 }, message: { name: "message", wireType: e.WIRE_TYPES.LDELIM, defaultValue: null }, group: { name: "group", wireType: e.WIRE_TYPES.STARTGROUP, defaultValue: null } }; e.MAP_KEY_TYPES = [e.TYPES.int32, e.TYPES.sint32, e.TYPES.sfixed32, e.TYPES.uint32, e.TYPES.fixed32, e.TYPES.int64, e.TYPES.sint64, e.TYPES.sfixed64, e.TYPES.uint64, e.TYPES.fixed64, e.TYPES.bool, e.TYPES.string, e.TYPES.bytes]; e.ID_MIN = 1; e.ID_MAX = 536870911; e.convertFieldsToCamelCase = false; e.populateAccessors = true; e.populateDefaults = true; e.Util = (function () { var f = {}; f.IS_NODE = !!(typeof process === "object" && process + "" === "[object process]" && !process.browser); f.XHR = function () { var g = [function () { return new XMLHttpRequest() }, function () { return new ActiveXObject("Msxml2.XMLHTTP") }, function () { return new ActiveXObject("Msxml3.XMLHTTP") }, function () { return new ActiveXObject("Microsoft.XMLHTTP") }]; var k = null; for (var h = 0; h < g.length; h++) { try { k = g[h]() } catch (j) { continue } break } if (!k) { throw Error("XMLHttpRequest is not supported") } return k }; f.fetch = function (j, l) { if (l && typeof l != "function") { l = null } if (f.IS_NODE) { var g = require("fs"); if (l) { g.readFile(j, function (m, n) { if (m) { l(null) } else { l("" + n) } }) } else { try { return g.readFileSync(j) } catch (h) { return null } } } else { var k = f.XHR(); k.open("GET", j, l ? true : false); k.setRequestHeader("Accept", "text/plain"); if (typeof k.overrideMimeType === "function") { k.overrideMimeType("text/plain") } if (l) { k.onreadystatechange = function () { if (k.readyState != 4) { return } if (k.status == 200 || (k.status == 0 && typeof k.responseText === "string")) { l(k.responseText) } else { l(null) } }; if (k.readyState == 4) { return } k.send(null) } else { k.send(null); if (k.status == 200 || (k.status == 0 && typeof k.responseText === "string")) { return k.responseText } return null } } }; f.toCamelCase = function (g) { return g.replace(/_([a-zA-Z])/g, function (j, h) { return h.toUpperCase() }) }; return f })(); e.Lang = { DELIM: /[\s\{\}=;:\[\],'"\(\)<>]/g, RULE: /^(?:required|optional|repeated|map)$/, TYPE: /^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/, NAME: /^[a-zA-Z_][a-zA-Z_0-9]*$/, TYPEDEF: /^[a-zA-Z][a-zA-Z_0-9]*$/, TYPEREF: /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/, FQTYPEREF: /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/, NUMBER: /^-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+|([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?)|inf|nan)$/, NUMBER_DEC: /^(?:[1-9][0-9]*|0)$/, NUMBER_HEX: /^0[xX][0-9a-fA-F]+$/, NUMBER_OCT: /^0[0-7]+$/, NUMBER_FLT: /^([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?|inf|nan)$/, BOOL: /^(?:true|false)$/i, ID: /^(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/, NEGID: /^\-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/, WHITESPACE: /\s/, STRING: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")|(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g, STRING_DQ: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g, STRING_SQ: /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g }; e.DotProto = (function (l, k) { var n = {}; var m = function (q) { this.source = q + ""; this.index = 0; this.line = 1; this.stack = []; this._stringOpen = null }; var p = m.prototype; p._readString = function () { var r = this._stringOpen === '"' ? k.STRING_DQ : k.STRING_SQ; r.lastIndex = this.index - 1; var q = r.exec(this.source); if (!q) { throw Error("unterminated string") } this.index = r.lastIndex; this.stack.push(this._stringOpen); this._stringOpen = null; return q[1] }; p.next = function () { if (this.stack.length > 0) { return this.stack.shift() } if (this.index >= this.source.length) { return null } if (this._stringOpen !== null) { return this._readString() } var u, t, s; do { u = false; while (k.WHITESPACE.test(s = this.source.charAt(this.index))) { if (s === "\n") { ++this.line } if (++this.index === this.source.length) { return null } } if (this.source.charAt(this.index) === "/") { ++this.index; if (this.source.charAt(this.index) === "/") { while (this.source.charAt(++this.index) !== "\n") { if (this.index == this.source.length) { return null } } ++this.index; ++this.line; u = true } else { if ((s = this.source.charAt(this.index)) === "*") { do { if (s === "\n") { ++this.line } if (++this.index === this.source.length) { return null } t = s; s = this.source.charAt(this.index) } while (t !== "*" || s !== "/"); ++this.index; u = true } else { return "/" } } } } while (u); if (this.index === this.source.length) { return null } var q = this.index; k.DELIM.lastIndex = 0; var v = k.DELIM.test(this.source.charAt(q++)); if (!v) { while (q < this.source.length && !k.DELIM.test(this.source.charAt(q))) { ++q } } var r = this.source.substring(this.index, this.index = q); if (r === '"' || r === "'") { this._stringOpen = r } return r }; p.peek = function () { if (this.stack.length === 0) { var q = this.next(); if (q === null) { return null } this.stack.push(q) } return this.stack[0] }; p.skip = function (q) { var r = this.next(); if (r !== q) { throw Error("illegal '" + r + "', '" + q + "' expected") } }; p.omit = function (q) { if (this.peek() === q) { this.next(); return true } return false }; p.toString = function () { return "Tokenizer (" + this.index + "/" + this.source.length + " at line " + this.line + ")" }; n.Tokenizer = m; var j = function (q) { this.tn = new m(q); this.proto3 = false }; var g = j.prototype; g.parse = function () { var q = { name: "[ROOT]", "package": null, messages: [], enums: [], imports: [], options: {}, services: [] }; var s, r = true; try { while (s = this.tn.next()) { switch (s) { case "package": if (!r || q["package"] !== null) { throw Error("unexpected 'package'") } s = this.tn.next(); if (!k.TYPEREF.test(s)) { throw Error("illegal package name: " + s) } this.tn.skip(";"); q["package"] = s; break; case "import": if (!r) { throw Error("unexpected 'import'") } s = this.tn.peek(); if (s === "public") { this.tn.next() } s = this._readString(); this.tn.skip(";"); q.imports.push(s); break; case "syntax": if (!r) { throw Error("unexpected 'syntax'") } this.tn.skip("="); if ((q.syntax = this._readString()) === "proto3") { this.proto3 = true } this.tn.skip(";"); break; case "message": this._parseMessage(q, null); r = false; break; case "enum": this._parseEnum(q); r = false; break; case "option": this._parseOption(q); break; case "service": this._parseService(q); break; case "extend": this._parseExtend(q); break; default: throw Error("unexpected '" + s + "'") } } } catch (t) { t.message = "Parse error at line " + this.tn.line + ": " + t.message; throw t } delete q.name; return q }; j.parse = function (q) { return new j(q).parse() }; function f(s, r) { var t = -1, q = 1; if (s.charAt(0) == "-") { q = -1; s = s.substring(1) } if (k.NUMBER_DEC.test(s)) { t = parseInt(s) } else { if (k.NUMBER_HEX.test(s)) { t = parseInt(s.substring(2), 16) } else { if (k.NUMBER_OCT.test(s)) { t = parseInt(s.substring(1), 8) } else { throw Error("illegal id value: " + (q < 0 ? "-" : "") + s) } } } t = (q * t) | 0; if (!r && t < 0) { throw Error("illegal id value: " + (q < 0 ? "-" : "") + s) } return t } function o(r) { var q = 1; if (r.charAt(0) == "-") { q = -1; r = r.substring(1) } if (k.NUMBER_DEC.test(r)) { return q * parseInt(r, 10) } else { if (k.NUMBER_HEX.test(r)) { return q * parseInt(r.substring(2), 16) } else { if (k.NUMBER_OCT.test(r)) { return q * parseInt(r.substring(1), 8) } else { if (r === "inf") { return q * Infinity } else { if (r === "nan") { return NaN } else { if (k.NUMBER_FLT.test(r)) { return q * parseFloat(r) } } } } } } throw Error("illegal number value: " + (q < 0 ? "-" : "") + r) } g._readString = function () { var r = "", q, s; do { s = this.tn.next(); if (s !== "'" && s !== '"') { throw Error("illegal string delimiter: " + s) } r += this.tn.next(); this.tn.skip(s); q = this.tn.peek() } while (q === '"' || q === '"'); return r }; g._readValue = function (q) { var r = this.tn.peek(), s; if (r === '"' || r === "'") { return this._readString() } this.tn.next(); if (k.NUMBER.test(r)) { return o(r) } if (k.BOOL.test(r)) { return (r.toLowerCase() === "true") } if (q && k.TYPEREF.test(r)) { return r } throw Error("illegal value: " + r) }; g._parseOption = function (s, u) { var r = this.tn.next(), t = false; if (r === "(") { t = true; r = this.tn.next() } if (!k.TYPEREF.test(r)) { throw Error("illegal option name: " + r) } var q = r; if (t) { this.tn.skip(")"); q = "(" + q + ")"; r = this.tn.peek(); if (k.FQTYPEREF.test(r)) { q += r; this.tn.next() } } this.tn.skip("="); this._parseOptionValue(s, q); if (!u) { this.tn.skip(";") } }; function h(r, q, s) { if (typeof r[q] === "undefined") { r[q] = s } else { if (!Array.isArray(r[q])) { r[q] = [r[q]] } r[q].push(s) } } g._parseOptionValue = function (s, q) { var r = this.tn.peek(); if (r !== "{") { h(s.options, q, this._readValue(true)) } else { this.tn.skip("{"); while ((r = this.tn.next()) !== "}") { if (!k.NAME.test(r)) { throw Error("illegal option name: " + q + "." + r) } if (this.tn.omit(":")) { h(s.options, q + "." + r, this._readValue(true)) } else { this._parseOptionValue(s, q + "." + r) } } } }; g._parseService = function (s) { var r = this.tn.next(); if (!k.NAME.test(r)) { throw Error("illegal service name at line " + this.tn.line + ": " + r) } var q = r; var t = { name: q, rpc: {}, options: {} }; this.tn.skip("{"); while ((r = this.tn.next()) !== "}") { if (r === "option") { this._parseOption(t) } else { if (r === "rpc") { this._parseServiceRPC(t) } else { throw Error("illegal service token: " + r) } } } this.tn.omit(";"); s.services.push(t) }; g._parseServiceRPC = function (t) { var s = "rpc", r = this.tn.next(); if (!k.NAME.test(r)) { throw Error("illegal rpc service method name: " + r) } var q = r; var u = { request: null, response: null, request_stream: false, response_stream: false, options: {} }; this.tn.skip("("); r = this.tn.next(); if (r.toLowerCase() === "stream") { u.request_stream = true; r = this.tn.next() } if (!k.TYPEREF.test(r)) { throw Error("illegal rpc service request type: " + r) } u.request = r; this.tn.skip(")"); r = this.tn.next(); if (r.toLowerCase() !== "returns") { throw Error("illegal rpc service request type delimiter: " + r) } this.tn.skip("("); r = this.tn.next(); if (r.toLowerCase() === "stream") { u.response_stream = true; r = this.tn.next() } u.response = r; this.tn.skip(")"); r = this.tn.peek(); if (r === "{") { this.tn.next(); while ((r = this.tn.next()) !== "}") { if (r === "option") { this._parseOption(u) } else { throw Error("illegal rpc service token: " + r) } } this.tn.omit(";") } else { this.tn.skip(";") } if (typeof t[s] === "undefined") { t[s] = {} } t[s][q] = u }; g._parseMessage = function (s, r) { var u = !!r, q = this.tn.next(); var t = { name: "", fields: [], enums: [], messages: [], options: {}, services: [], oneofs: {} }; if (!k.NAME.test(q)) { throw Error("illegal " + (u ? "group" : "message") + " name: " + q) } t.name = q; if (u) { this.tn.skip("="); r.id = f(this.tn.next()); t.isGroup = true } q = this.tn.peek(); if (q === "[" && r) { this._parseFieldOptions(r) } this.tn.skip("{"); while ((q = this.tn.next()) !== "}") { if (k.RULE.test(q)) { this._parseMessageField(t, q) } else { if (q === "oneof") { this._parseMessageOneOf(t) } else { if (q === "enum") { this._parseEnum(t) } else { if (q === "message") { this._parseMessage(t) } else { if (q === "option") { this._parseOption(t) } else { if (q === "service") { this._parseService(t) } else { if (q === "extensions") { t.extensions = this._parseExtensionRanges() } else { if (q === "reserved") { this._parseIgnored() } else { if (q === "extend") { this._parseExtend(t) } else { if (k.TYPEREF.test(q)) { if (!this.proto3) { throw Error("illegal field rule: " + q) } this._parseMessageField(t, "optional", q) } else { throw Error("illegal message token: " + q) } } } } } } } } } } } this.tn.omit(";"); s.messages.push(t); return t }; g._parseIgnored = function () { while (this.tn.peek() !== ";") { this.tn.next() } this.tn.skip(";") }; g._parseMessageField = function (v, u, t) { if (!k.RULE.test(u)) { throw Error("illegal message field rule: " + u) } var s = { rule: u, type: "", name: "", options: {}, id: 0 }; var r; if (u === "map") { if (t) { throw Error("illegal type: " + t) } this.tn.skip("<"); r = this.tn.next(); if (!k.TYPE.test(r) && !k.TYPEREF.test(r)) { throw Error("illegal message field type: " + r) } s.keytype = r; this.tn.skip(","); r = this.tn.next(); if (!k.TYPE.test(r) && !k.TYPEREF.test(r)) { throw Error("illegal message field: " + r) } s.type = r; this.tn.skip(">"); r = this.tn.next(); if (!k.NAME.test(r)) { throw Error("illegal message field name: " + r) } s.name = r; this.tn.skip("="); s.id = f(this.tn.next()); r = this.tn.peek(); if (r === "[") { this._parseFieldOptions(s) } this.tn.skip(";") } else { t = typeof t !== "undefined" ? t : this.tn.next(); if (t === "group") { var q = this._parseMessage(v, s); if (!/^[A-Z]/.test(q.name)) { throw Error("illegal group name: " + q.name) } s.type = q.name; s.name = q.name.toLowerCase(); this.tn.omit(";") } else { if (!k.TYPE.test(t) && !k.TYPEREF.test(t)) { throw Error("illegal message field type: " + t) } s.type = t; r = this.tn.next(); if (!k.NAME.test(r)) { throw Error("illegal message field name: " + r) } s.name = r; this.tn.skip("="); s.id = f(this.tn.next()); r = this.tn.peek(); if (r === "[") { this._parseFieldOptions(s) } this.tn.skip(";") } } v.fields.push(s); return s }; g._parseMessageOneOf = function (u) { var t = this.tn.next(); if (!k.NAME.test(t)) { throw Error("illegal oneof name: " + t) } var r = t, s; var q = []; this.tn.skip("{"); while ((t = this.tn.next()) !== "}") { s = this._parseMessageField(u, "optional", t); s.oneof = r; q.push(s.id) } this.tn.omit(";"); u.oneofs[r] = q }; g._parseFieldOptions = function (r) { this.tn.skip("["); var q, s = true; while ((q = this.tn.peek()) !== "]") { if (!s) { this.tn.skip(",") } this._parseOption(r, true); s = false } this.tn.next() }; g._parseEnum = function (t) { var q = { name: "", values: [], options: {} }; var r = this.tn.next(); if (!k.NAME.test(r)) { throw Error("illegal name: " + r) } q.name = r; this.tn.skip("{"); while ((r = this.tn.next()) !== "}") { if (r === "option") { this._parseOption(q) } else { if (!k.NAME.test(r)) { throw Error("illegal name: " + r) } this.tn.skip("="); var s = { name: r, id: f(this.tn.next(), true) }; r = this.tn.peek(); if (r === "[") { this._parseFieldOptions({ options: {} }) } this.tn.skip(";"); q.values.push(s) } } this.tn.omit(";"); t.enums.push(q) }; g._parseExtensionRanges = function () { var q = []; var s, r, t; do { r = []; while (true) { s = this.tn.next(); switch (s) { case "min": t = l.ID_MIN; break; case "max": t = l.ID_MAX; break; default: t = o(s); break } r.push(t); if (r.length === 2) { break } if (this.tn.peek() !== "to") { r.push(t); break } this.tn.next() } q.push(r) } while (this.tn.omit(",")); this.tn.skip(";"); return q }; g._parseExtend = function (s) { var q = this.tn.next(); if (!k.TYPEREF.test(q)) { throw Error("illegal extend reference: " + q) } var r = { ref: q, fields: [] }; this.tn.skip("{"); while ((q = this.tn.next()) !== "}") { if (k.RULE.test(q)) { this._parseMessageField(r, q) } else { if (k.TYPEREF.test(q)) { if (!this.proto3) { throw Error("illegal field rule: " + q) } this._parseMessageField(r, "optional", q) } else { throw Error("illegal extend token: " + q) } } } this.tn.omit(";"); s.messages.push(r); return r }; g.toString = function () { return "Parser at line " + this.tn.line }; n.Parser = j; return n })(e, e.Lang); e.Reflect = (function (o) { var j = {}; var k = function (G, I, H) { this.builder = G; this.parent = I; this.name = H; this.className }; var h = k.prototype; h.fqn = function () { var G = this.name, H = this; do { H = H.parent; if (H == null) { break } G = H.name + "." + G } while (true); return G }; h.toString = function (G) { return (G ? this.className + " " : "") + this.fqn() }; h.build = function () { throw Error(this.toString(true) + " cannot be built directly") }; j.T = k; var s = function (H, K, J, I, G) { k.call(this, H, K, J); this.className = "Namespace"; this.children = []; this.options = I || {}; this.syntax = G || "proto2" }; var x = s.prototype = Object.create(k.prototype); x.getChildren = function (J) { J = J || null; if (J == null) { return this.children.slice() } var I = []; for (var H = 0, G = this.children.length; H < G; ++H) { if (this.children[H] instanceof J) { I.push(this.children[H]) } } return I }; x.addChild = function (H) { var G; if (G = this.getChild(H.name)) { if (G instanceof f.Field && G.name !== G.originalName && this.getChild(G.originalName) === null) { G.name = G.originalName } else { if (H instanceof f.Field && H.name !== H.originalName && this.getChild(H.originalName) === null) { H.name = H.originalName } else { throw Error("Duplicate name in namespace " + this.toString(true) + ": " + H.name) } } } this.children.push(H) }; x.getChild = function (J) { var I = typeof J === "number" ? "id" : "name"; for (var H = 0, G = this.children.length; H < G; ++H) { if (this.children[H][I] === J) { return this.children[H] } } return null }; x.resolve = function (J, G) { var H = typeof J === "string" ? J.split(".") : J, L = this, I = 0; if (H[I] === "") { while (L.parent !== null) { L = L.parent } I++ } var K; do { do { if (!(L instanceof j.Namespace)) { L = null; break } K = L.getChild(H[I]); if (!K || !(K instanceof j.T) || (G && !(K instanceof j.Namespace))) { L = null; break } L = K; I++ } while (I < H.length); if (L != null) { break } if (this.parent !== null) { return this.parent.resolve(J, G) } } while (L != null); return L }; x.qn = function (I) { var H = [], K = I; do { H.unshift(K.name); K = K.parent } while (K !== null); for (var G = 1; G <= H.length; G++) { var J = H.slice(H.length - G); if (I === this.resolve(J, I instanceof j.Namespace)) { return J.join(".") } } return I.fqn() }; x.build = function () { var J = {}; var I = this.children; for (var H = 0, G = I.length, K; H < G; ++H) { K = I[H]; if (K instanceof s) { J[K.name] = K.build() } } if (Object.defineProperty) { Object.defineProperty(J, "$options", { value: this.buildOpt() }) } return J }; x.buildOpt = function () { var J = {}, K = Object.keys(this.options); for (var I = 0, G = K.length; I < G; ++I) { var H = K[I], L = this.options[K[I]]; J[H] = L } return J }; x.getOption = function (G) { if (typeof G === "undefined") { return this.options } return typeof this.options[G] !== "undefined" ? this.options[G] : null }; j.Namespace = s; var v = function (J, H, I, G) { this.type = J; this.resolvedType = H; this.isMapKey = I; this.syntax = G; if (I && o.MAP_KEY_TYPES.indexOf(J) < 0) { throw Error("Invalid map key type: " + J.name) } }; var A = v.prototype; function z(G) { if (typeof G === "string") { G = o.TYPES[G] } if (typeof G.defaultValue === "undefined") { throw Error("default value for type " + G.name + " is not supported") } if (G == o.TYPES.bytes) { return new c(0) } return G.defaultValue } v.defaultFieldValue = z; function n(H, G) { if (H && typeof H.low === "number" && typeof H.high === "number" && typeof H.unsigned === "boolean" && H.low === H.low && H.high === H.high) { return new o.Long(H.low, H.high, typeof G === "undefined" ? H.unsigned : G) } if (typeof H === "string") { return o.Long.fromString(H, G || false, 10) } if (typeof H === "number") { return o.Long.fromNumber(H, G || false) } throw Error("not convertible to Long") } A.verifyValue = function (J) { var G = function (N, M) { throw Error("Illegal value for " + this.toString(true) + " of type " + this.type.name + ": " + N + " (" + M + ")") }.bind(this); switch (this.type) { case o.TYPES.int32: case o.TYPES.sint32: case o.TYPES.sfixed32: if (typeof J !== "number" || (J === J && J % 1 !== 0)) { G(typeof J, "not an integer") } return J > 4294967295 ? J | 0 : J; case o.TYPES.uint32: case o.TYPES.fixed32: if (typeof J !== "number" || (J === J && J % 1 !== 0)) { G(typeof J, "not an integer") } return J < 0 ? J >>> 0 : J; case o.TYPES.int64: case o.TYPES.sint64: case o.TYPES.sfixed64: if (o.Long) { try { return n(J, false) } catch (L) { G(typeof J, L.message) } } else { G(typeof J, "requires Long.js") } case o.TYPES.uint64: case o.TYPES.fixed64: if (o.Long) { try { return n(J, true) } catch (L) { G(typeof J, L.message) } } else { G(typeof J, "requires Long.js") } case o.TYPES.bool: if (typeof J !== "boolean") { G(typeof J, "not a boolean") } return J; case o.TYPES["float"]: case o.TYPES["double"]: if (typeof J !== "number") { G(typeof J, "not a number") } return J; case o.TYPES.string: if (typeof J !== "string" && !(J && J instanceof String)) { G(typeof J, "not a string") } return "" + J; case o.TYPES.bytes: if (c.isByteBuffer(J)) { return J } return c.wrap(J); case o.TYPES["enum"]: var H = this.resolvedType.getChildren(o.Reflect.Enum.Value); for (I = 0; I < H.length; I++) { if (H[I].name == J) { return H[I].id } else { if (H[I].id == J) { return H[I].id } } } if (this.syntax === "proto3") { if (typeof J !== "number" || (J === J && J % 1 !== 0)) { G(typeof J, "not an integer") } if (J > 4294967295 || J < 0) { G(typeof J, "not in range for uint32") } return J } else { G(J, "not a valid enum value") } case o.TYPES.group: case o.TYPES.message: if (!J || typeof J !== "object") { G(typeof J, "object expected") } if (J instanceof this.resolvedType.clazz) { return J } if (J instanceof o.Builder.Message) { var K = {}; for (var I in J) { if (J.hasOwnProperty(I)) { K[I] = J[I] } } J = K } return new (this.resolvedType.clazz)(J) } throw Error("[INTERNAL] Illegal value for " + this.toString(true) + ": " + J + " (undefined type " + this.type + ")") }; A.calculateLength = function (I, G) { if (G === null) { return 0 } var H; switch (this.type) { case o.TYPES.int32: return G < 0 ? c.calculateVarint64(G) : c.calculateVarint32(G); case o.TYPES.uint32: return c.calculateVarint32(G); case o.TYPES.sint32: return c.calculateVarint32(c.zigZagEncode32(G)); case o.TYPES.fixed32: case o.TYPES.sfixed32: case o.TYPES["float"]: return 4; case o.TYPES.int64: case o.TYPES.uint64: return c.calculateVarint64(G); case o.TYPES.sint64: return c.calculateVarint64(c.zigZagEncode64(G)); case o.TYPES.fixed64: case o.TYPES.sfixed64: return 8; case o.TYPES.bool: return 1; case o.TYPES["enum"]: return c.calculateVarint32(G); case o.TYPES["double"]: return 8; case o.TYPES.string: H = c.calculateUTF8Bytes(G); return c.calculateVarint32(H) + H; case o.TYPES.bytes: if (G.remaining() < 0) { throw Error("Illegal value for " + this.toString(true) + ": " + G.remaining() + " bytes remaining") } return c.calculateVarint32(G.remaining()) + G.remaining(); case o.TYPES.message: H = this.resolvedType.calculate(G); return c.calculateVarint32(H) + H; case o.TYPES.group: H = this.resolvedType.calculate(G); return H + c.calculateVarint32((I << 3) | o.WIRE_TYPES.ENDGROUP) } throw Error("[INTERNAL] Illegal value to encode in " + this.toString(true) + ": " + G + " (unknown type)") }; A.encodeValue = function (K, H, G) { if (H === null) { return G } switch (this.type) { case o.TYPES.int32: if (H < 0) { G.writeVarint64(H) } else { G.writeVarint32(H) } break; case o.TYPES.uint32: G.writeVarint32(H); break; case o.TYPES.sint32: G.writeVarint32ZigZag(H); break; case o.TYPES.fixed32: G.writeUint32(H); break; case o.TYPES.sfixed32: G.writeInt32(H); break; case o.TYPES.int64: case o.TYPES.uint64: G.writeVarint64(H); break; case o.TYPES.sint64: G.writeVarint64ZigZag(H); break; case o.TYPES.fixed64: G.writeUint64(H); break; case o.TYPES.sfixed64: G.writeInt64(H); break; case o.TYPES.bool: if (typeof H === "string") { G.writeVarint32(H.toLowerCase() === "false" ? 0 : !!H) } else { G.writeVarint32(H ? 1 : 0) } break; case o.TYPES["enum"]: G.writeVarint32(H); break; case o.TYPES["float"]: G.writeFloat32(H); break; case o.TYPES["double"]: G.writeFloat64(H); break; case o.TYPES.string: G.writeVString(H); break; case o.TYPES.bytes: if (H.remaining() < 0) { throw Error("Illegal value for " + this.toString(true) + ": " + H.remaining() + " bytes remaining") } var I = H.offset; G.writeVarint32(H.remaining()); G.append(H); H.offset = I; break; case o.TYPES.message: var J = new c().LE(); this.resolvedType.encode(H, J); G.writeVarint32(J.offset); G.append(J.flip()); break; case o.TYPES.group: this.resolvedType.encode(H, G); G.writeVarint32((K << 3) | o.WIRE_TYPES.ENDGROUP); break; default: throw Error("[INTERNAL] Illegal value to encode in " + this.toString(true) + ": " + H + " (unknown type)") } return G }; A.decode = function (H, G, K) { if (G != this.type.wireType) { throw Error("Unexpected wire type for element") } var I, J; switch (this.type) { case o.TYPES.int32: return H.readVarint32() | 0; case o.TYPES.uint32: return H.readVarint32() >>> 0; case o.TYPES.sint32: return H.readVarint32ZigZag() | 0; case o.TYPES.fixed32: return H.readUint32() >>> 0; case o.TYPES.sfixed32: return H.readInt32() | 0; case o.TYPES.int64: return H.readVarint64(); case o.TYPES.uint64: return H.readVarint64().toUnsigned(); case o.TYPES.sint64: return H.readVarint64ZigZag(); case o.TYPES.fixed64: return H.readUint64(); case o.TYPES.sfixed64: return H.readInt64(); case o.TYPES.bool: return !!H.readVarint32(); case o.TYPES["enum"]: return H.readVarint32(); case o.TYPES["float"]: return H.readFloat(); case o.TYPES["double"]: return H.readDouble(); case o.TYPES.string: return H.readVString(); case o.TYPES.bytes: J = H.readVarint32(); if (H.remaining() < J) { throw Error("Illegal number of bytes for " + this.toString(true) + ": " + J + " required but got only " + H.remaining()) } I = H.clone(); I.limit = I.offset + J; H.offset += J; return I; case o.TYPES.message: J = H.readVarint32(); return this.resolvedType.decode(H, J); case o.TYPES.group: return this.resolvedType.decode(H, -1, K) } throw Error("[INTERNAL] Illegal decode type") }; A.valueFromString = function (G) { if (!this.isMapKey) { throw Error("valueFromString() called on non-map-key element") } switch (this.type) { case o.TYPES.int32: case o.TYPES.sint32: case o.TYPES.sfixed32: case o.TYPES.uint32: case o.TYPES.fixed32: return this.verifyValue(parseInt(G)); case o.TYPES.int64: case o.TYPES.sint64: case o.TYPES.sfixed64: case o.TYPES.uint64: case o.TYPES.fixed64: return this.verifyValue(G); case o.TYPES.bool: return G === "true"; case o.TYPES.string: return this.verifyValue(G); case o.TYPES.bytes: return c.fromBinary(G) } }; A.valueToString = function (G) { if (!this.isMapKey) { throw Error("valueToString() called on non-map-key element") } if (this.type === o.TYPES.bytes) { return G.toString("binary") } else { return G.toString() } }; j.Element = v; var f = function (H, K, J, I, L, G) { s.call(this, H, K, J, I, G); this.className = "Message"; this.extensions = undefined; this.clazz = null; this.isGroup = !!L; this._fields = null; this._fieldsById = null; this._fieldsByName = null }; var F = f.prototype = Object.create(s.prototype); F.build = function (G) { if (this.clazz && !G) { return this.clazz } var I = (function (S, M) { var Q = M.getChildren(S.Reflect.Message.Field), W = M.getChildren(S.Reflect.Message.OneOf); var U = function (Z, ad) { S.Builder.Message.call(this); for (var aa = 0, T = W.length; aa < T; ++aa) { this[W[aa].name] = null } for (aa = 0, T = Q.length; aa < T; ++aa) { var ac = Q[aa]; this[ac.name] = ac.repeated ? [] : (ac.map ? new S.Map(ac) : null); if ((ac.required || M.syntax === "proto3") && ac.defaultValue !== null) { this[ac.name] = ac.defaultValue } } if (arguments.length > 0) { var ab; if (arguments.length === 1 && Z !== null && typeof Z === "object" && (typeof Z.encode !== "function" || Z instanceof U) && !Array.isArray(Z) && !(Z instanceof S.Map) && !c.isByteBuffer(Z) && !(Z instanceof ArrayBuffer) && !(S.Long && Z instanceof S.Long)) { this.$set(Z) } else { for (aa = 0, T = arguments.length; aa < T; ++aa) { if (typeof (ab = arguments[aa]) !== "undefined") { this.$set(Q[aa].name, ab) } } } } }; var P = U.prototype = Object.create(S.Builder.Message.prototype); P.add = function (T, Z, ab) { var aa = M._fieldsByName[T]; if (!ab) { if (!aa) { throw Error(this + "#" + T + " is undefined") } if (!(aa instanceof S.Reflect.Message.Field)) { throw Error(this + "#" + T + " is not a field: " + aa.toString(true)) } if (!aa.repeated) { throw Error(this + "#" + T + " is not a repeated field") } Z = aa.verifyValue(Z, true) } if (this[T] === null) { this[T] = [] } this[T].push(Z); return this }; P.$add = P.add; P.set = function (ad, Z, ac) { if (ad && typeof ad === "object") { ac = Z; for (var ab in ad) { if (ad.hasOwnProperty(ab) && typeof (Z = ad[ab]) !== "undefined") { this.$set(ab, Z, ac) } } return this } var aa = M._fieldsByName[ad]; if (!ac) { if (!aa) { throw Error(this + "#" + ad + " is not a field: undefined") } if (!(aa instanceof S.Reflect.Message.Field)) { throw Error(this + "#" + ad + " is not a field: " + aa.toString(true)) } this[aa.name] = (Z = aa.verifyValue(Z)) } else { this[ad] = Z } if (aa && aa.oneof) { var T = this[aa.oneof.name]; if (Z !== null) { if (T !== null && T !== aa.name) { this[T] = null } this[aa.oneof.name] = aa.name } else { if (T === ad) { this[aa.oneof.name] = null } } } return this }; P.$set = P.set; P.get = function (T, aa) { if (aa) { return this[T] } var Z = M._fieldsByName[T]; if (!Z || !(Z instanceof S.Reflect.Message.Field)) { throw Error(this + "#" + T + " is not a field: undefined") } if (!(Z instanceof S.Reflect.Message.Field)) { throw Error(this + "#" + T + " is not a field: " + Z.toString(true)) } return this[Z.name] }; P.$get = P.get; for (var N = 0; N < Q.length; N++) { var V = Q[N]; if (V instanceof S.Reflect.Message.ExtensionField) { continue } if (M.builder.options.populateAccessors) { (function (ab) { var Z = ab.originalName.replace(/(_[a-zA-Z])/g, function (ad) { return ad.toUpperCase().replace("_", "") }); Z = Z.substring(0, 1).toUpperCase() + Z.substring(1); var aa = ab.originalName.replace(/([A-Z])/g, function (ad) { return "_" + ad }); var ac = function (ad, ae) { this[ab.name] = ae ? ad : ab.verifyValue(ad); return this }; var T = function () { return this[ab.name] }; if (M.getChild("set" + Z) === null) { P["set" + Z] = ac } if (M.getChild("set_" + aa) === null) { P["set_" + aa] = ac } if (M.getChild("get" + Z) === null) { P["get" + Z] = T } if (M.getChild("get_" + aa) === null) { P["get_" + aa] = T } })(V) } } P.encode = function (Z, ab) { if (typeof Z === "boolean") { ab = Z, Z = undefined } var T = false; if (!Z) { Z = new c(), T = true } var aa = Z.littleEndian; try { M.encode(this, Z.LE(), ab); return (T ? Z.flip() : Z).LE(aa) } catch (ac) { Z.LE(aa); throw (ac) } }; U.encode = function (aa, T, Z) { return new U(aa).encode(T, Z) }; P.calculate = function () { return M.calculate(this) }; P.encodeDelimited = function (Z) { var T = false; if (!Z) { Z = new c(), T = true } var aa = new c().LE(); M.encode(this, aa).flip(); Z.writeVarint32(aa.remaining()); Z.append(aa); return T ? Z.flip() : Z }; P.encodeAB = function () { try { return this.encode().toArrayBuffer() } catch (T) { if (T.encoded) { T.encoded = T.encoded.toArrayBuffer() } throw (T) } }; P.toArrayBuffer = P.encodeAB; P.encodeNB = function () { try { return this.encode().toBuffer() } catch (T) { if (T.encoded) { T.encoded = T.encoded.toBuffer() } throw (T) } }; P.toBuffer = P.encodeNB; P.encode64 = function () { try { return this.encode().toBase64() } catch (T) { if (T.encoded) { T.encoded = T.encoded.toBase64() } throw (T) } }; P.toBase64 = P.encode64; P.encodeHex = function () { try { return this.encode().toHex() } catch (T) { if (T.encoded) { T.encoded = T.encoded.toHex() } throw (T) } }; P.toHex = P.encodeHex; function X(aa, ae, ac, ai) { if (aa === null || typeof aa !== "object") { if (ai && ai instanceof S.Reflect.Enum) { var T = S.Reflect.Enum.getName(ai.object, aa); if (T !== null) { return T } } return aa } if (c.isByteBuffer(aa)) { return ae ? aa.toBase64() : aa.toBuffer() } if (S.Long.isLong(aa)) { return ac ? aa.toString() : S.Long.fromValue(aa) } var ag; if (Array.isArray(aa)) { ag = []; aa.forEach(function (ak, aj) { ag[aj] = X(ak, ae, ac, ai) }); return ag } ag = {}; if (aa instanceof S.Map) { var ab = aa.entries(); for (var ad = ab.next() ; !ad.done; ad = ab.next()) { ag[aa.keyElem.valueToString(ad.value[0])] = X(ad.value[1], ae, ac, aa.valueElem.resolvedType) } return ag } var af = aa.$type, ah = undefined; for (var Z in aa) { if (aa.hasOwnProperty(Z)) { if (af && (ah = af.getChild(Z))) { ag[Z] = X(aa[Z], ae, ac, ah.resolvedType) } else { ag[Z] = X(aa[Z], ae, ac) } } } return ag } P.toRaw = function (T, Z) { return X(this, !!T, !!Z, this.$type) }; P.encodeJSON = function () { return JSON.stringify(X(this, true, true, this.$type)) }; U.decode = function (T, Z) { if (typeof T === "string") { T = c.wrap(T, Z ? Z : "base64") } T = c.isByteBuffer(T) ? T : c.wrap(T); var aa = T.littleEndian; try { var ac = M.decode(T.LE()); T.LE(aa); return ac } catch (ab) { T.LE(aa); throw (ab) } }; U.decodeDelimited = function (Z, aa) { if (typeof Z === "string") { Z = c.wrap(Z, aa ? aa : "base64") } Z = c.isByteBuffer(Z) ? Z : c.wrap(Z); if (Z.remaining() < 1) { return null } var ad = Z.offset, T = Z.readVarint32(); if (Z.remaining() < T) { Z.offset = ad; return null } try { var ac = M.decode(Z.slice(Z.offset, Z.offset + T).LE()); Z.offset += T; return ac } catch (ab) { Z.offset += T; throw ab } }; U.decode64 = function (T) { return U.decode(T, "base64") }; U.decodeHex = function (T) { return U.decode(T, "hex") }; U.decodeJSON = function (T) { return new U(JSON.parse(T)) }; P.toString = function () { return M.toString() }; var L; var O; var Y; var R; if (Object.defineProperty) { Object.defineProperty(U, "$options", { value: M.buildOpt() }), Object.defineProperty(P, "$options", { value: U["$options"] }), Object.defineProperty(U, "$type", { value: M }), Object.defineProperty(P, "$type", { value: M }) } return U })(o, this); this._fields = []; this._fieldsById = {}; this._fieldsByName = {}; for (var J = 0, H = this.children.length, K; J < H; J++) { K = this.children[J]; if (K instanceof t || K instanceof f || K instanceof r) { if (I.hasOwnProperty(K.name)) { throw Error("Illegal reflect child of " + this.toString(true) + ": " + K.toString(true) + " cannot override static property '" + K.name + "'") } I[K.name] = K.build() } else { if (K instanceof f.Field) { K.build(), this._fields.push(K), this._fieldsById[K.id] = K, this._fieldsByName[K.name] = K } else { if (!(K instanceof f.OneOf) && !(K instanceof q)) { throw Error("Illegal reflect child of " + this.toString(true) + ": " + this.children[J].toString(true)) } } } } return this.clazz = I }; F.encode = function (O, K, L) { var G = null, N; for (var M = 0, J = this._fields.length, H; M < J; ++M) { N = this._fields[M]; H = O[N.name]; if (N.required && H === null) { if (G === null) { G = N } } else { N.encode(L ? H : N.verifyValue(H), K, O) } } if (G !== null) { var I = Error("Missing at least one required field for " + this.toString(true) + ": " + G); I.encoded = K; throw (I) } return K }; F.calculate = function (I) { for (var L = 0, H = 0, G = this._fields.length, J, K; H < G; ++H) { J = this._fields[H]; K = I[J.name]; if (J.required && K === null) { throw Error("Missing at least one required field for " + this.toString(true) + ": " + J) } else { L += J.calculate(K, I) } } return L }; function D(J, I) { var H = I.readVarint32(), G = H & 7, K = H >>> 3; switch (G) { case o.WIRE_TYPES.VARINT: do { H = I.readUint8() } while ((H & 128) === 128); break; case o.WIRE_TYPES.BITS64: I.offset += 8; break; case o.WIRE_TYPES.LDELIM: H = I.readVarint32(); I.offset += H; break; case o.WIRE_TYPES.STARTGROUP: D(K, I); break; case o.WIRE_TYPES.ENDGROUP: if (K === J) { return false } else { throw Error("Illegal GROUPEND after unknown group: " + K + " (" + J + " expected)") } case o.WIRE_TYPES.BITS32: I.offset += 4; break; default: throw Error("Illegal wire type in unknown group " + J + ": " + G) } return true } F.decode = function (M, I, O) { I = typeof I === "number" ? I : -1; var G = M.offset, J = new (this.clazz)(), U, T, H, R; while (M.offset < G + I || (I === -1 && M.remaining() > 0)) { U = M.readVarint32(); T = U & 7; H = U >>> 3; if (T === o.WIRE_TYPES.ENDGROUP) { if (H !== O) { throw Error("Illegal group end indicator for " + this.toString(true) + ": " + H + " (" + (O ? O + " expected" : "not a group") + ")") } break } if (!(R = this._fieldsById[H])) { switch (T) { case o.WIRE_TYPES.VARINT: M.readVarint32(); break; case o.WIRE_TYPES.BITS32: M.offset += 4; break; case o.WIRE_TYPES.BITS64: M.offset += 8; break; case o.WIRE_TYPES.LDELIM: var P = M.readVarint32(); M.offset += P; break; case o.WIRE_TYPES.STARTGROUP: while (D(H, M)) { } break; default: throw Error("Illegal wire type for unknown field " + H + " in " + this.toString(true) + "#decode: " + T) } continue } if (R.repeated && !R.options.packed) { J[R.name].push(R.decode(T, M)) } else { if (R.map) { var Q = R.decode(T, M); J[R.name].set(Q[0], Q[1]) } else { J[R.name] = R.decode(T, M); if (R.oneof) { var S = J[R.oneof.name]; if (S !== null && S !== R.name) { J[S] = null } J[R.oneof.name] = R.name } } } } for (var N = 0, L = this._fields.length; N < L; ++N) { R = this._fields[N]; if (J[R.name] === null) { if (this.syntax === "proto3") { J[R.name] = R.defaultValue } else { if (R.required) { var K = Error("Missing at least one required field for " + this.toString(true) + ": " + R.name); K.decoded = J; throw (K) } else { if (o.populateDefaults && R.defaultValue !== null) { J[R.name] = R.defaultValue } } } } } return J }; j.Message = f; var m = function (K, O, N, I, M, G, H, P, L, J) { k.call(this, K, O, G); this.className = "Message.Field"; this.required = N === "required"; this.repeated = N === "repeated"; this.map = N === "map"; this.keyType = I || null; this.type = M; this.resolvedType = null; this.id = H; this.options = P || {}; this.defaultValue = null; this.oneof = L || null; this.syntax = J || "proto2"; this.originalName = this.name; this.element = null; this.keyElement = null; if (this.builder.options.convertFieldsToCamelCase && !(this instanceof f.ExtensionField)) { this.name = o.Util.toCamelCase(this.name) } }; var E = m.prototype = Object.create(k.prototype); E.build = function () { this.element = new v(this.type, this.resolvedType, false, this.syntax); if (this.map) { this.keyElement = new v(this.keyType, undefined, true, this.syntax) } if (this.syntax === "proto3" && !this.repeated && !this.map) { this.defaultValue = v.defaultFieldValue(this.type) } else { if (typeof this.options["default"] !== "undefined") { this.defaultValue = this.verifyValue(this.options["default"]) } } }; E.verifyValue = function (K, H) { H = H || false; var G = function (M, L) { throw Error("Illegal value for " + this.toString(true) + " of type " + this.type.name + ": " + M + " (" + L + ")") }.bind(this); if (K === null) { if (this.required) { G(typeof K, "required") } if (this.syntax === "proto3" && this.type !== o.TYPES.message) { G(typeof K, "proto3 field without field presence cannot be null") } return null } var J; if (this.repeated && !H) { if (!Array.isArray(K)) { K = [K] } var I = []; for (J = 0; J < K.length; J++) { I.push(this.element.verifyValue(K[J])) } return I } if (this.map && !H) { if (!(K instanceof o.Map)) { if (!(K instanceof Object)) { G(typeof K, "expected ProtoBuf.Map or raw object for map field") } return new o.Map(this, K) } else { return K } } if (!this.repeated && Array.isArray(K)) { G(typeof K, "no array expected") } return this.element.verifyValue(K) }; E.hasWirePresence = function (H, G) { if (this.syntax !== "proto3") { return (H !== null) } if (this.oneof && G[this.oneof.name] === this.name) { return true } switch (this.type) { case o.TYPES.int32: case o.TYPES.sint32: case o.TYPES.sfixed32: case o.TYPES.uint32: case o.TYPES.fixed32: return H !== 0; case o.TYPES.int64: case o.TYPES.sint64: case o.TYPES.sfixed64: case o.TYPES.uint64: case o.TYPES.fixed64: return H.low !== 0 || H.high !== 0; case o.TYPES.bool: return H; case o.TYPES["float"]: case o.TYPES["double"]: return H !== 0; case o.TYPES.string: return H.length > 0; case o.TYPES.bytes: return H.remaining() > 0; case o.TYPES["enum"]: return H !== 0; case o.TYPES.message: return H !== null; default: return true } }; E.encode = function (N, J, O) { if (this.type === null || typeof this.type !== "object") { throw Error("[INTERNAL] Unresolved type in " + this.toString(true) + ": " + this.type) } if (N === null || (this.repeated && N.length == 0)) { return J } try { if (this.repeated) { var K; if (this.options.packed && o.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) { J.writeVarint32((this.id << 3) | o.WIRE_TYPES.LDELIM); J.ensureCapacity(J.offset += 1); var G = J.offset; for (K = 0; K < N.length; K++) { this.element.encodeValue(this.id, N[K], J) } var L = J.offset - G, I = c.calculateVarint32(L); if (I > 1) { var H = J.slice(G, J.offset); G += I - 1; J.offset = G; J.append(H) } J.writeVarint32(L, G - I) } else { for (K = 0; K < N.length; K++) { J.writeVarint32((this.id << 3) | this.type.wireType), this.element.encodeValue(this.id, N[K], J) } } } else { if (this.map) { N.forEach(function (S, Q, P) { var R = c.calculateVarint32((1 << 3) | this.keyType.wireType) + this.keyElement.calculateLength(1, Q) + c.calculateVarint32((2 << 3) | this.type.wireType) + this.element.calculateLength(2, S); J.writeVarint32((this.id << 3) | o.WIRE_TYPES.LDELIM); J.writeVarint32(R); J.writeVarint32((1 << 3) | this.keyType.wireType); this.keyElement.encodeValue(1, Q, J); J.writeVarint32((2 << 3) | this.type.wireType); this.element.encodeValue(2, S, J) }, this) } else { if (this.hasWirePresence(N, O)) { J.writeVarint32((this.id << 3) | this.type.wireType); this.element.encodeValue(this.id, N, J) } } } } catch (M) { throw Error("Illegal value for " + this.toString(true) + ": " + N + " (" + M + ")") } return J }; E.calculate = function (J, I) { J = this.verifyValue(J); if (this.type === null || typeof this.type !== "object") { throw Error("[INTERNAL] Unresolved type in " + this.toString(true) + ": " + this.type) } if (J === null || (this.repeated && J.length == 0)) { return 0 } var L = 0; try { if (this.repeated) { var H, G; if (this.options.packed && o.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) { L += c.calculateVarint32((this.id << 3) | o.WIRE_TYPES.LDELIM); G = 0; for (H = 0; H < J.length; H++) { G += this.element.calculateLength(this.id, J[H]) } L += c.calculateVarint32(G); L += G } else { for (H = 0; H < J.length; H++) { L += c.calculateVarint32((this.id << 3) | this.type.wireType), L += this.element.calculateLength(this.id, J[H]) } } } else { if (this.map) { J.forEach(function (P, N, M) { var O = c.calculateVarint32((1 << 3) | this.keyType.wireType) + this.keyElement.calculateLength(1, N) + c.calculateVarint32((2 << 3) | this.type.wireType) + this.element.calculateLength(2, P); L += c.calculateVarint32((this.id << 3) | o.WIRE_TYPES.LDELIM); L += c.calculateVarint32(O); L += O }, this) } else { if (this.hasWirePresence(J, I)) { L += c.calculateVarint32((this.id << 3) | this.type.wireType); L += this.element.calculateLength(this.id, J) } } } } catch (K) { throw Error("Illegal value for " + this.toString(true) + ": " + J + " (" + K + ")") } return L }; E.decode = function (M, H, J) { var L, I; var P = (!this.map && M == this.type.wireType) || (!J && this.repeated && this.options.packed && M == o.WIRE_TYPES.LDELIM) || (this.map && M == o.WIRE_TYPES.LDELIM); if (!P) { throw Error("Illegal wire type for field " + this.toString(true) + ": " + M + " (" + this.type.wireType + " expected)") } if (M == o.WIRE_TYPES.LDELIM && this.repeated && this.options.packed && o.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) { if (!J) { I = H.readVarint32(); I = H.offset + I; var O = []; while (H.offset < I) { O.push(this.decode(this.type.wireType, H, true)) } return O } } if (this.map) { var N = v.defaultFieldValue(this.keyType); L = v.defaultFieldValue(this.type); I = H.readVarint32(); if (H.remaining() < I) { throw Error("Illegal number of bytes for " + this.toString(true) + ": " + I + " required but got only " + H.remaining()) } var K = H.clone(); K.limit = K.offset + I; H.offset += I; while (K.remaining() > 0) { var Q = K.readVarint32(); M = Q & 7; var G = Q >>> 3; if (G === 1) { N = this.keyElement.decode(K, M, G) } else { if (G === 2) { L = this.element.decode(K, M, G) } else { throw Error("Unexpected tag in map field key/value submessage") } } } return [N, L] } return this.element.decode(H, M, this.id) }; j.Message.Field = m; var w = function (G, K, L, J, I, M, H) { m.call(this, G, K, L, null, J, I, M, H); this.extension }; w.prototype = Object.create(m.prototype); j.Message.ExtensionField = w; var y = function (G, I, H) { k.call(this, G, I, H); this.fields = [] }; j.Message.OneOf = y; var t = function (H, K, J, I, G) { s.call(this, H, K, J, I, G); this.className = "Enum"; this.object = null }; t.getName = function (G, K) { var J = Object.keys(G); for (var I = 0, H; I < J.length; ++I) { if (G[H = J[I]] === K) { return H } } return null }; var l = t.prototype = Object.create(s.prototype); l.build = function (G) { if (this.object && !G) { return this.object } var J = new o.Builder.Enum(), I = this.getChildren(t.Value); for (var K = 0, H = I.length; K < H; ++K) { J[I[K]["name"]] = I[K]["id"] } if (Object.defineProperty) { Object.defineProperty(J, "$options", { value: this.buildOpt(), enumerable: false }) } return this.object = J }; j.Enum = t; var C = function (G, I, H, J) { k.call(this, G, I, H); this.className = "Enum.Value"; this.id = J }; C.prototype = Object.create(k.prototype); j.Enum.Value = C; var q = function (G, I, H, J) { k.call(this, G, I, H); this.field = J }; q.prototype = Object.create(k.prototype); j.Extension = q; var r = function (H, G, J, I) { s.call(this, H, G, J, I); this.className = "Service"; this.clazz = null }; var B = r.prototype = Object.create(s.prototype); B.build = function (G) { if (this.clazz && !G) { return this.clazz } return this.clazz = (function (O, J) { var I = function (R) { O.Builder.Service.call(this); this.rpcImpl = R || function (S, T, U) { setTimeout(U.bind(this, Error("Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services")), 0) } }; var P = I.prototype = Object.create(O.Builder.Service.prototype); var M = J.getChildren(O.Reflect.Service.RPCMethod); for (var K = 0; K < M.length; K++) { (function (R) { P[R.name] = function (T, U) { try { try { T = R.resolvedRequestType.clazz.decode(c.wrap(T)) } catch (S) { if (!(S instanceof TypeError)) { throw S } } if (T === null || typeof T !== "object") { throw Error("Illegal arguments") } if (!(T instanceof R.resolvedRequestType.clazz)) { T = new R.resolvedRequestType.clazz(T) } this.rpcImpl(R.fqn(), T, function (W, V) { if (W) { U(W); return } try { V = R.resolvedResponseType.clazz.decode(V) } catch (X) { } if (!V || !(V instanceof R.resolvedResponseType.clazz)) { U(Error("Illegal response type received in service method " + J.name + "#" + R.name)); return } U(null, V) }) } catch (S) { setTimeout(U.bind(this, S), 0) } }; I[R.name] = function (S, T, U) { new I(S)[R.name](T, U) }; if (Object.defineProperty) { Object.defineProperty(I[R.name], "$options", { value: R.buildOpt() }), Object.defineProperty(P[R.name], "$options", { value: I[R.name]["$options"] }) } })(M[K]) } var H; var L; var Q; var N; if (Object.defineProperty) { Object.defineProperty(I, "$options", { value: J.buildOpt() }), Object.defineProperty(P, "$options", { value: I["$options"] }), Object.defineProperty(I, "$type", { value: J }), Object.defineProperty(P, "$type", { value: J }) } return I })(o, this) }; j.Service = r; var g = function (G, J, I, H) { k.call(this, G, J, I); this.className = "Service.Method"; this.options = H || {} }; var p = g.prototype = Object.create(k.prototype); p.buildOpt = x.buildOpt; j.Service.Method = g; var u = function (I, N, L, M, H, K, G, J) { g.call(this, I, N, L, J); this.className = "Service.RPCMethod"; this.requestName = M; this.responseName = H; this.requestStream = K; this.responseStream = G; this.resolvedRequestType = null; this.resolvedResponseType = null }; u.prototype = Object.create(g.prototype); j.Service.RPCMethod = u; return j })(e); e.Builder = (function (j, h, l) { var k = function (m) { this.ns = new l.Namespace(this, null, ""); this.ptr = this.ns; this.resolved = false; this.result = null; this.files = {}; this.importRoot = null; this.options = m || {} }; var f = k.prototype; k.isMessage = function (m) { if (typeof m.name !== "string") { return false } if (typeof m.values !== "undefined" || typeof m.rpc !== "undefined") { return false } return true }; k.isMessageField = function (m) { if (typeof m.rule !== "string" || typeof m.name !== "string" || typeof m.type !== "string" || typeof m.id === "undefined") { return false } return true }; k.isEnum = function (m) { if (typeof m.name !== "string") { return false } if (typeof m.values === "undefined" || !Array.isArray(m.values) || m.values.length === 0) { return false } return true }; k.isService = function (m) { if (typeof m.name !== "string" || typeof m.rpc !== "object" || !m.rpc) { return false } return true }; k.isExtend = function (m) { if (typeof m.ref !== "string") { return false } return true }; f.reset = function () { this.ptr = this.ns; return this }; f.define = function (m) { if (typeof m !== "string" || !h.TYPEREF.test(m)) { throw Error("illegal namespace: " + m) } m.split(".").forEach(function (n) { var o = this.ptr.getChild(n); if (o === null) { this.ptr.addChild(o = new l.Namespace(this, this.ptr, n)) } this.ptr = o }, this); return this }; f.create = function (n) { if (!n) { return this } if (!Array.isArray(n)) { n = [n] } else { if (n.length === 0) { return this } n = n.slice() } var m = [n]; while (m.length > 0) { n = m.pop(); if (!Array.isArray(n)) { throw Error("not a valid namespace: " + JSON.stringify(n)) } while (n.length > 0) { var q = n.shift(); if (k.isMessage(q)) { var r = new l.Message(this, this.ptr, q.name, q.options, q.isGroup, q.syntax); var p = {}; if (q.oneofs) { Object.keys(q.oneofs).forEach(function (s) { r.addChild(p[s] = new l.Message.OneOf(this, r, s)) }, this) } if (q.fields) { q.fields.forEach(function (s) { if (r.getChild(s.id | 0) !== null) { throw Error("duplicate or invalid field id in " + r.name + ": " + s.id) } if (s.options && typeof s.options !== "object") { throw Error("illegal field options in " + r.name + "#" + s.name) } var t = null; if (typeof s.oneof === "string" && !(t = p[s.oneof])) { throw Error("illegal oneof in " + r.name + "#" + s.name + ": " + s.oneof) } s = new l.Message.Field(this, r, s.rule, s.keytype, s.type, s.name, s.id, s.options, t, q.syntax); if (t) { t.fields.push(s) } r.addChild(s) }, this) } var o = []; if (q.enums) { q.enums.forEach(function (s) { o.push(s) }) } if (q.messages) { q.messages.forEach(function (s) { o.push(s) }) } if (q.services) { q.services.forEach(function (s) { o.push(s) }) } if (q.extensions) { if (typeof q.extensions[0] === "number") { r.extensions = [q.extensions] } else { r.extensions = q.extensions } } this.ptr.addChild(r); if (o.length > 0) { m.push(n); n = o; o = null; this.ptr = r; r = null; continue } o = null } else { if (k.isEnum(q)) { r = new l.Enum(this, this.ptr, q.name, q.options, q.syntax); q.values.forEach(function (s) { r.addChild(new l.Enum.Value(this, r, s.name, s.id)) }, this); this.ptr.addChild(r) } else { if (k.isService(q)) { r = new l.Service(this, this.ptr, q.name, q.options); Object.keys(q.rpc).forEach(function (t) { var s = q.rpc[t]; r.addChild(new l.Service.RPCMethod(this, r, t, s.request, s.response, !!s.request_stream, !!s.response_stream, s.options)) }, this); this.ptr.addChild(r) } else { if (k.isExtend(q)) { r = this.ptr.resolve(q.ref, true); if (r) { q.fields.forEach(function (t) { if (r.getChild(t.id | 0) !== null) { throw Error("duplicate extended field id in " + r.name + ": " + t.id) } if (r.extensions) { var v = false; r.extensions.forEach(function (x) { if (t.id >= x[0] && t.id <= x[1]) { v = true } }); if (!v) { throw Error("illegal extended field id in " + r.name + ": " + t.id + " (not within valid ranges)") } } var s = t.name; if (this.options.convertFieldsToCamelCase) { s = j.Util.toCamelCase(s) } var w = new l.Message.ExtensionField(this, r, t.rule, t.type, this.ptr.fqn() + "." + s, t.id, t.options); var u = new l.Extension(this, this.ptr, t.name, w); w.extension = u; this.ptr.addChild(u); r.addChild(w) }, this) } else { if (!/\.?google\.protobuf\./.test(q.ref)) { throw Error("extended message " + q.ref + " is not defined") } } } else { throw Error("not a valid definition: " + JSON.stringify(q)) } } } } q = null; r = null } n = null; this.ptr = this.ptr.parent } this.resolved = false; this.result = null; return this }; function g(m) { if (m.messages) { m.messages.forEach(function (n) { n.syntax = m.syntax; g(n) }) } if (m.enums) { m.enums.forEach(function (n) { n.syntax = m.syntax }) } } f["import"] = function (w, m) { var o = "/"; if (typeof m === "string") { if (j.Util.IS_NODE) { m = require("path")["resolve"](m) } if (this.files[m] === true) { return this.reset() } this.files[m] = true } else { if (typeof m === "object") { var u = m.root; if (j.Util.IS_NODE) { u = require("path")["resolve"](u) } if (u.indexOf("\\") >= 0 || m.file.indexOf("\\") >= 0) { o = "\\" } var p = u + o + m.file; if (this.files[p] === true) { return this.reset() } this.files[p] = true } } if (w.imports && w.imports.length > 0) { var r, t = false; if (typeof m === "object") { this.importRoot = m.root; t = true; r = this.importRoot; m = m.file; if (r.indexOf("\\") >= 0 || m.indexOf("\\") >= 0) { o = "\\" } } else { if (typeof m === "string") { if (this.importRoot) { r = this.importRoot } else { if (m.indexOf("/") >= 0) { r = m.replace(/\/[^\/]*$/, ""); if (r === "") { r = "/" } } else { if (m.indexOf("\\") >= 0) { r = m.replace(/\\[^\\]*$/, ""); o = "\\" } else { r = "." } } } } else { r = null } } for (var s = 0; s < w.imports.length; s++) { if (typeof w.imports[s] === "string") { if (!r) { throw Error("cannot determine import root") } var v = w.imports[s]; if (v === "google/protobuf/descriptor.proto") { continue } v = r + o + v; if (this.files[v] === true) { continue } if (/\.proto$/i.test(v) && !j.DotProto) { v = v.replace(/\.proto$/, ".json") } var q = j.Util.fetch(v); if (q === null) { throw Error("failed to import '" + v + "' in '" + m + "': file not found") } if (/\.json$/i.test(v)) { this["import"](JSON.parse(q + ""), v) } else { this["import"](j.DotProto.Parser.parse(q), v) } } else { if (!m) { this["import"](w.imports[s]) } else { if (/\.(\w+)$/.test(m)) { this["import"](w.imports[s], m.replace(/^(.+)\.(\w+)$/, function (y, x, z) { return x + "_import" + s + "." + z })) } else { this["import"](w.imports[s], m + "_import" + s) } } } } if (t) { this.importRoot = null } } if (w["package"]) { this.define(w["package"]) } if (w.syntax) { g(w) } var n = this.ptr; if (w.options) { Object.keys(w.options).forEach(function (x) { n.options[x] = w.options[x] }) } if (w.messages) { this.create(w.messages), this.ptr = n } if (w.enums) { this.create(w.enums), this.ptr = n } if (w.services) { this.create(w.services), this.ptr = n } if (w["extends"]) { this.create(w["extends"]) } return this.reset() }; f.resolveAll = function () { var m; if (this.ptr == null || typeof this.ptr.type === "object") { return this } if (this.ptr instanceof l.Namespace) { this.ptr.children.forEach(function (n) { this.ptr = n; this.resolveAll() }, this) } else { if (this.ptr instanceof l.Message.Field) { if (!h.TYPE.test(this.ptr.type)) { if (!h.TYPEREF.test(this.ptr.type)) { throw Error("illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.type) } m = (this.ptr instanceof l.Message.ExtensionField ? this.ptr.extension.parent : this.ptr.parent).resolve(this.ptr.type, true); if (!m) { throw Error("unresolvable type reference in " + this.ptr.toString(true) + ": " + this.ptr.type) } this.ptr.resolvedType = m; if (m instanceof l.Enum) { this.ptr.type = j.TYPES["enum"]; if (this.ptr.syntax === "proto3" && m.syntax !== "proto3") { throw Error("proto3 message cannot reference proto2 enum") } } else { if (m instanceof l.Message) { this.ptr.type = m.isGroup ? j.TYPES.group : j.TYPES.message } else { throw Error("illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.type) } } } else { this.ptr.type = j.TYPES[this.ptr.type] } if (this.ptr.map) { if (!h.TYPE.test(this.ptr.keyType)) { throw Error("illegal key type for map field in " + this.ptr.toString(true) + ": " + this.ptr.keyType) } this.ptr.keyType = j.TYPES[this.ptr.keyType] } } else { if (this.ptr instanceof j.Reflect.Service.Method) { if (this.ptr instanceof j.Reflect.Service.RPCMethod) { m = this.ptr.parent.resolve(this.ptr.requestName, true); if (!m || !(m instanceof j.Reflect.Message)) { throw Error("Illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.requestName) } this.ptr.resolvedRequestType = m; m = this.ptr.parent.resolve(this.ptr.responseName, true); if (!m || !(m instanceof j.Reflect.Message)) { throw Error("Illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.responseName) } this.ptr.resolvedResponseType = m } else { throw Error("illegal service type in " + this.ptr.toString(true)) } } else { if (!(this.ptr instanceof j.Reflect.Message.OneOf) && !(this.ptr instanceof j.Reflect.Extension) && !(this.ptr instanceof j.Reflect.Enum.Value)) { throw Error("illegal object in namespace: " + typeof (this.ptr) + ": " + this.ptr) } } } } return this.reset() }; f.build = function (o) { this.reset(); if (!this.resolved) { this.resolveAll(), this.resolved = true, this.result = null } if (this.result === null) { this.result = this.ns.build() } if (!o) { return this.result } var m = typeof o === "string" ? o.split(".") : o, p = this.result; for (var n = 0; n < m.length; n++) { if (p[m[n]]) { p = p[m[n]] } else { p = null; break } } return p }; f.lookup = function (n, m) { return n ? this.ns.resolve(n, m) : this.ns }; f.toString = function () { return "Builder" }; k.Message = function () { }; k.Enum = function () { }; k.Service = function () { }; return k })(e, e.Lang, e.Reflect); e.Map = (function (g, k) { var f = function (p, o) { if (!p.map) { throw Error("field is not a map") } this.field = p; this.keyElem = new k.Element(p.keyType, null, true, p.syntax); this.valueElem = new k.Element(p.type, p.resolvedType, false, p.syntax); this.map = {}; Object.defineProperty(this, "size", { get: function () { return Object.keys(this.map).length } }); if (o) { var n = Object.keys(o); for (var m = 0; m < n.length; m++) { var l = this.keyElem.valueFromString(n[m]); var q = this.valueElem.verifyValue(o[n[m]]); this.map[this.keyElem.valueToString(l)] = { key: l, value: q } } } }; var h = f.prototype; function j(m) { var l = 0; return { next: function () { if (l < m.length) { return { done: false, value: m[l++] } } return { done: true } } } } h.clear = function () { this.map = {} }; h["delete"] = function (m) { var n = this.keyElem.valueToString(this.keyElem.verifyValue(m)); var l = n in this.map; delete this.map[n]; return l }; h.entries = function () { var l = []; var o = Object.keys(this.map); for (var m = 0, n; m < o.length; m++) { l.push([(n = this.map[o[m]]).key, n.value]) } return j(l) }; h.keys = function () { var m = []; var n = Object.keys(this.map); for (var l = 0; l < n.length; l++) { m.push(this.map[n[l]].key) } return j(m) }; h.values = function () { var l = []; var n = Object.keys(this.map); for (var m = 0; m < n.length; m++) { l.push(this.map[n[m]].value) } return j(l) }; h.forEach = function (l, m) { var p = Object.keys(this.map); for (var n = 0, o; n < p.length; n++) { l.call(m, (o = this.map[p[n]]).value, o.key, this) } }; h.set = function (l, n) { var o = this.keyElem.verifyValue(l); var m = this.valueElem.verifyValue(n); this.map[this.keyElem.valueToString(o)] = { key: o, value: m }; return this }; h.get = function (l) { var m = this.keyElem.valueToString(this.keyElem.verifyValue(l)); if (!(m in this.map)) { return undefined } return this.map[m].value }; h.has = function (l) { var m = this.keyElem.valueToString(this.keyElem.verifyValue(l)); return (m in this.map) }; return f })(e, e.Reflect); e.loadProto = function (h, g, f) { if (typeof g === "string" || (g && typeof g.file === "string" && typeof g.root === "string")) { f = g, g = undefined } return e.loadJson(e.DotProto.Parser.parse(h), g, f) }; e.protoFromString = e.loadProto; e.loadProtoFile = function (g, j, f) { if (j && typeof j === "object") { f = j, j = null } else { if (!j || typeof j !== "function") { j = null } } if (j) { return e.Util.fetch(typeof g === "string" ? g : g.root + "/" + g.file, function (k) { if (k === null) { j(Error("Failed to fetch file")); return } try { j(null, e.loadProto(k, f, g)) } catch (l) { j(l) } }) } var h = e.Util.fetch(typeof g === "object" ? g.root + "/" + g.file : g); return h === null ? null : e.loadProto(h, f, g) }; e.protoFromFile = e.loadProtoFile; e.newBuilder = function (f) { f = f || {}; if (typeof f.convertFieldsToCamelCase === "undefined") { f.convertFieldsToCamelCase = e.convertFieldsToCamelCase } if (typeof f.populateAccessors === "undefined") { f.populateAccessors = e.populateAccessors } return new e.Builder(f) }; e.loadJson = function (h, g, f) { if (typeof g === "string" || (g && typeof g.file === "string" && typeof g.root === "string")) { f = g, g = null } if (!g || typeof g !== "object") { g = e.newBuilder() } if (typeof h === "string") { h = JSON.parse(h) } g["import"](h, f); g.resolveAll(); return g }; e.loadJsonFile = function (g, j, f) { if (j && typeof j === "object") { f = j, j = null } else { if (!j || typeof j !== "function") { j = null } } if (j) { return e.Util.fetch(typeof g === "string" ? g : g.root + "/" + g.file, function (k) { if (k === null) { j(Error("Failed to fetch file")); return } try { j(null, e.loadJson(JSON.parse(k), f, g)) } catch (l) { j(l) } }) } var h = e.Util.fetch(typeof g === "object" ? g.root + "/" + g.file : g); return h === null ? null : e.loadJson(JSON.parse(h), f, g) }; var d = function (o) { var k, h, g, f, l, n, j, m = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1); n = o.length; l = 0; j = ""; while (l < n) { do { k = m[o.charCodeAt(l++) & 255] } while (l < n && k == -1); if (k == -1) { break } do { h = m[o.charCodeAt(l++) & 255] } while (l < n && h == -1); if (h == -1) { break } j += String.fromCharCode((k << 2) | ((h & 48) >> 4)); do { g = o.charCodeAt(l++) & 255; if (g == 61) { return j } g = m[g] } while (l < n && g == -1); if (g == -1) { break } j += String.fromCharCode(((h & 15) << 4) | ((g & 60) >> 2)); do { f = o.charCodeAt(l++) & 255; if (f == 61) { return j } f = m[f] } while (l < n && f == -1); if (f == -1) { break } j += String.fromCharCode(((g & 3) << 6) | f) } return j }; var a = d(""); window.Modules = e.loadProto(a, undefined, "").build("Modules").probuf; if (typeof RongIMLib != "undefined" && typeof RongIMLib.RongIMClient != "undefined") { if (!RongIMLib.RongIMClient._memoryStore.hasModules && Object.prototype.toString.call(RongIMLib.RongIMClient._memoryStore.hasModules) == "[object Boolean]") { RongIMLib.RongIMClient._memoryStore.hasModules = true; RongIMLib.RongIMClient.connect(RongIMClient._memoryStore.token, RongIMClient._memoryStore.callback) } } return e });
    exports('protobuf');
});